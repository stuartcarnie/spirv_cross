/* automatically generated by rust-bindgen 0.64.0 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub mod spv {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type Id = ::std::os::raw::c_uint;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum SourceLanguage {
            Unknown = 0,
            Essl = 1,
            Glsl = 2,
            OpenClC = 3,
            OpenClCpp = 4,
            Hlsl = 5,
            CppForOpenCl = 6,
            Sycl = 7,
        }
        impl root::spv::ExecutionModel {
            pub const RayGenerationNv: root::spv::ExecutionModel = ExecutionModel::RayGenerationKhr;
        }
        impl root::spv::ExecutionModel {
            pub const IntersectionNv: root::spv::ExecutionModel = ExecutionModel::IntersectionKhr;
        }
        impl root::spv::ExecutionModel {
            pub const AnyHitNv: root::spv::ExecutionModel = ExecutionModel::AnyHitKhr;
        }
        impl root::spv::ExecutionModel {
            pub const ClosestHitNv: root::spv::ExecutionModel = ExecutionModel::ClosestHitKhr;
        }
        impl root::spv::ExecutionModel {
            pub const MissNv: root::spv::ExecutionModel = ExecutionModel::MissKhr;
        }
        impl root::spv::ExecutionModel {
            pub const CallableNv: root::spv::ExecutionModel = ExecutionModel::CallableKhr;
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum ExecutionModel {
            Vertex = 0,
            TessellationControl = 1,
            TessellationEvaluation = 2,
            Geometry = 3,
            Fragment = 4,
            GlCompute = 5,
            Kernel = 6,
            TaskNv = 5267,
            MeshNv = 5268,
            RayGenerationKhr = 5313,
            IntersectionKhr = 5314,
            AnyHitKhr = 5315,
            ClosestHitKhr = 5316,
            MissKhr = 5317,
            CallableKhr = 5318,
            TaskExt = 5364,
            MeshExt = 5365,
        }
        impl root::spv::AddressingModel {
            pub const PhysicalStorageBuffer64Ext: root::spv::AddressingModel =
                AddressingModel::PhysicalStorageBuffer64;
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum AddressingModel {
            Logical = 0,
            Physical32 = 1,
            Physical64 = 2,
            PhysicalStorageBuffer64 = 5348,
        }
        impl root::spv::MemoryModel {
            pub const VulkanKhr: root::spv::MemoryModel = MemoryModel::Vulkan;
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum MemoryModel {
            Simple = 0,
            Glsl450 = 1,
            OpenCl = 2,
            Vulkan = 3,
        }
        impl root::spv::ExecutionMode {
            pub const OutputLinesNv: root::spv::ExecutionMode = ExecutionMode::OutputLinesExt;
        }
        impl root::spv::ExecutionMode {
            pub const OutputPrimitivesNv: root::spv::ExecutionMode =
                ExecutionMode::OutputPrimitivesExt;
        }
        impl root::spv::ExecutionMode {
            pub const OutputTrianglesNv: root::spv::ExecutionMode =
                ExecutionMode::OutputTrianglesExt;
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum ExecutionMode {
            Invocations = 0,
            SpacingEqual = 1,
            SpacingFractionalEven = 2,
            SpacingFractionalOdd = 3,
            VertexOrderCw = 4,
            VertexOrderCcw = 5,
            PixelCenterInteger = 6,
            OriginUpperLeft = 7,
            OriginLowerLeft = 8,
            EarlyFragmentTests = 9,
            PointMode = 10,
            Xfb = 11,
            DepthReplacing = 12,
            DepthGreater = 14,
            DepthLess = 15,
            DepthUnchanged = 16,
            LocalSize = 17,
            LocalSizeHint = 18,
            InputPoints = 19,
            InputLines = 20,
            InputLinesAdjacency = 21,
            Triangles = 22,
            InputTrianglesAdjacency = 23,
            Quads = 24,
            Isolines = 25,
            OutputVertices = 26,
            OutputPoints = 27,
            OutputLineStrip = 28,
            OutputTriangleStrip = 29,
            VecTypeHint = 30,
            ContractionOff = 31,
            Initializer = 33,
            Finalizer = 34,
            SubgroupSize = 35,
            SubgroupsPerWorkgroup = 36,
            SubgroupsPerWorkgroupId = 37,
            LocalSizeId = 38,
            LocalSizeHintId = 39,
            SubgroupUniformControlFlowKhr = 4421,
            PostDepthCoverage = 4446,
            DenormPreserve = 4459,
            DenormFlushToZero = 4460,
            SignedZeroInfNanPreserve = 4461,
            RoundingModeRte = 4462,
            RoundingModeRtz = 4463,
            EarlyAndLateFragmentTestsAmd = 5017,
            StencilRefReplacingExt = 5027,
            StencilRefUnchangedFrontAmd = 5079,
            StencilRefGreaterFrontAmd = 5080,
            StencilRefLessFrontAmd = 5081,
            StencilRefUnchangedBackAmd = 5082,
            StencilRefGreaterBackAmd = 5083,
            StencilRefLessBackAmd = 5084,
            OutputLinesExt = 5269,
            OutputPrimitivesExt = 5270,
            DerivativeGroupQuadsNv = 5289,
            DerivativeGroupLinearNv = 5290,
            OutputTrianglesExt = 5298,
            PixelInterlockOrderedExt = 5366,
            PixelInterlockUnorderedExt = 5367,
            SampleInterlockOrderedExt = 5368,
            SampleInterlockUnorderedExt = 5369,
            ShadingRateInterlockOrderedExt = 5370,
            ShadingRateInterlockUnorderedExt = 5371,
            SharedLocalMemorySizeIntel = 5618,
            RoundingModeRtpintel = 5620,
            RoundingModeRtnintel = 5621,
            FloatingPointModeAltintel = 5622,
            FloatingPointModeIeeeintel = 5623,
            MaxWorkgroupSizeIntel = 5893,
            MaxWorkDimIntel = 5894,
            NoGlobalOffsetIntel = 5895,
            NumSimdWorkitemsIntel = 5896,
            SchedulerTargetFmaxMhzIntel = 5903,
            NamedBarrierCountIntel = 6417,
        }
        impl root::spv::StorageClass {
            pub const CallableDataNv: root::spv::StorageClass = StorageClass::CallableDataKhr;
        }
        impl root::spv::StorageClass {
            pub const IncomingCallableDataNv: root::spv::StorageClass =
                StorageClass::IncomingCallableDataKhr;
        }
        impl root::spv::StorageClass {
            pub const RayPayloadNv: root::spv::StorageClass = StorageClass::RayPayloadKhr;
        }
        impl root::spv::StorageClass {
            pub const HitAttributeNv: root::spv::StorageClass = StorageClass::HitAttributeKhr;
        }
        impl root::spv::StorageClass {
            pub const IncomingRayPayloadNv: root::spv::StorageClass =
                StorageClass::IncomingRayPayloadKhr;
        }
        impl root::spv::StorageClass {
            pub const ShaderRecordBufferNv: root::spv::StorageClass =
                StorageClass::ShaderRecordBufferKhr;
        }
        impl root::spv::StorageClass {
            pub const PhysicalStorageBufferExt: root::spv::StorageClass =
                StorageClass::PhysicalStorageBuffer;
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum StorageClass {
            UniformConstant = 0,
            Input = 1,
            Uniform = 2,
            Output = 3,
            Workgroup = 4,
            CrossWorkgroup = 5,
            Private = 6,
            Function = 7,
            Generic = 8,
            PushConstant = 9,
            AtomicCounter = 10,
            Image = 11,
            StorageBuffer = 12,
            CallableDataKhr = 5328,
            IncomingCallableDataKhr = 5329,
            RayPayloadKhr = 5338,
            HitAttributeKhr = 5339,
            IncomingRayPayloadKhr = 5342,
            ShaderRecordBufferKhr = 5343,
            PhysicalStorageBuffer = 5349,
            TaskPayloadWorkgroupExt = 5402,
            CodeSectionIntel = 5605,
            DeviceOnlyIntel = 5936,
            HostOnlyIntel = 5937,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum Dim {
            Dim1D = 0,
            Dim2D = 1,
            Dim3D = 2,
            Cube = 3,
            Rect = 4,
            Buffer = 5,
            SubpassData = 6,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum SamplerAddressingMode {
            None = 0,
            ClampToEdge = 1,
            Clamp = 2,
            Repeat = 3,
            RepeatMirrored = 4,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum SamplerFilterMode {
            Nearest = 0,
            Linear = 1,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum ImageFormat {
            Unknown = 0,
            Rgba32f = 1,
            Rgba16f = 2,
            R32f = 3,
            Rgba8 = 4,
            Rgba8Snorm = 5,
            Rg32f = 6,
            Rg16f = 7,
            R11fG11fB10f = 8,
            R16f = 9,
            Rgba16 = 10,
            Rgb10A2 = 11,
            Rg16 = 12,
            Rg8 = 13,
            R16 = 14,
            R8 = 15,
            Rgba16Snorm = 16,
            Rg16Snorm = 17,
            Rg8Snorm = 18,
            R16Snorm = 19,
            R8Snorm = 20,
            Rgba32i = 21,
            Rgba16i = 22,
            Rgba8i = 23,
            R32i = 24,
            Rg32i = 25,
            Rg16i = 26,
            Rg8i = 27,
            R16i = 28,
            R8i = 29,
            Rgba32ui = 30,
            Rgba16ui = 31,
            Rgba8ui = 32,
            R32ui = 33,
            Rgb10A2ui = 34,
            Rg32ui = 35,
            Rg16ui = 36,
            Rg8ui = 37,
            R16ui = 38,
            R8ui = 39,
            R64ui = 40,
            R64i = 41,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum ImageChannelOrder {
            R = 0,
            A = 1,
            Rg = 2,
            Ra = 3,
            Rgb = 4,
            Rgba = 5,
            Bgra = 6,
            Argb = 7,
            Intensity = 8,
            Luminance = 9,
            Rx = 10,
            RGx = 11,
            RgBx = 12,
            Depth = 13,
            DepthStencil = 14,
            sRgb = 15,
            sRgBx = 16,
            sRgba = 17,
            sBgra = 18,
            Abgr = 19,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum ImageChannelDataType {
            SnormInt8 = 0,
            SnormInt16 = 1,
            UnormInt8 = 2,
            UnormInt16 = 3,
            UnormShort565 = 4,
            UnormShort555 = 5,
            UnormInt101010 = 6,
            SignedInt8 = 7,
            SignedInt16 = 8,
            SignedInt32 = 9,
            UnsignedInt8 = 10,
            UnsignedInt16 = 11,
            UnsignedInt32 = 12,
            HalfFloat = 13,
            Float = 14,
            UnormInt24 = 15,
            UnormInt1010102 = 16,
        }
        impl root::spv::ImageOperandsShift {
            pub const ImageOperandsMakeTexelAvailableKHRShift: root::spv::ImageOperandsShift =
                ImageOperandsShift::ImageOperandsMakeTexelAvailableShift;
        }
        impl root::spv::ImageOperandsShift {
            pub const ImageOperandsMakeTexelVisibleKHRShift: root::spv::ImageOperandsShift =
                ImageOperandsShift::ImageOperandsMakeTexelVisibleShift;
        }
        impl root::spv::ImageOperandsShift {
            pub const ImageOperandsNonPrivateTexelKHRShift: root::spv::ImageOperandsShift =
                ImageOperandsShift::ImageOperandsNonPrivateTexelShift;
        }
        impl root::spv::ImageOperandsShift {
            pub const ImageOperandsVolatileTexelKHRShift: root::spv::ImageOperandsShift =
                ImageOperandsShift::ImageOperandsVolatileTexelShift;
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum ImageOperandsShift {
            ImageOperandsBiasShift = 0,
            ImageOperandsLodShift = 1,
            ImageOperandsGradShift = 2,
            ImageOperandsConstOffsetShift = 3,
            ImageOperandsOffsetShift = 4,
            ImageOperandsConstOffsetsShift = 5,
            ImageOperandsSampleShift = 6,
            ImageOperandsMinLodShift = 7,
            ImageOperandsMakeTexelAvailableShift = 8,
            ImageOperandsMakeTexelVisibleShift = 9,
            ImageOperandsNonPrivateTexelShift = 10,
            ImageOperandsVolatileTexelShift = 11,
            ImageOperandsSignExtendShift = 12,
            ImageOperandsZeroExtendShift = 13,
            ImageOperandsNontemporalShift = 14,
            ImageOperandsOffsetsShift = 16,
        }
        impl ImageOperandsMask {
            pub const None: root::spv::ImageOperandsMask = root::spv::ImageOperandsMask(0);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsBiasMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(1);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsLodMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(2);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsGradMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(4);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsConstOffsetMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(8);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsOffsetMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(16);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsConstOffsetsMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(32);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsSampleMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(64);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsMinLodMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(128);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsMakeTexelAvailableMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(256);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsMakeTexelAvailableKHRMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(256);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsMakeTexelVisibleMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(512);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsMakeTexelVisibleKHRMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(512);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsNonPrivateTexelMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(1024);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsNonPrivateTexelKHRMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(1024);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsVolatileTexelMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(2048);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsVolatileTexelKHRMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(2048);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsSignExtendMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(4096);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsZeroExtendMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(8192);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsNontemporalMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(16384);
        }
        impl ImageOperandsMask {
            pub const ImageOperandsOffsetsMask: root::spv::ImageOperandsMask =
                root::spv::ImageOperandsMask(65536);
        }
        impl ::std::ops::BitOr<root::spv::ImageOperandsMask> for root::spv::ImageOperandsMask {
            type Output = Self;
            #[inline]
            fn bitor(self, other: Self) -> Self {
                ImageOperandsMask(self.0 | other.0)
            }
        }
        impl ::std::ops::BitOrAssign for root::spv::ImageOperandsMask {
            #[inline]
            fn bitor_assign(&mut self, rhs: root::spv::ImageOperandsMask) {
                self.0 |= rhs.0;
            }
        }
        impl ::std::ops::BitAnd<root::spv::ImageOperandsMask> for root::spv::ImageOperandsMask {
            type Output = Self;
            #[inline]
            fn bitand(self, other: Self) -> Self {
                ImageOperandsMask(self.0 & other.0)
            }
        }
        impl ::std::ops::BitAndAssign for root::spv::ImageOperandsMask {
            #[inline]
            fn bitand_assign(&mut self, rhs: root::spv::ImageOperandsMask) {
                self.0 &= rhs.0;
            }
        }
        #[repr(transparent)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ImageOperandsMask(pub ::std::os::raw::c_uint);
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum FPFastMathModeShift {
            FPFastMathModeNotNaNShift = 0,
            FPFastMathModeNotInfShift = 1,
            FPFastMathModeNSZShift = 2,
            FPFastMathModeAllowRecipShift = 3,
            FPFastMathModeFastShift = 4,
            FPFastMathModeAllowContractFastINTELShift = 16,
            FPFastMathModeAllowReassocINTELShift = 17,
        }
        impl FPFastMathModeMask {
            pub const None: root::spv::FPFastMathModeMask = root::spv::FPFastMathModeMask(0);
        }
        impl FPFastMathModeMask {
            pub const FPFastMathModeNotNaNMask: root::spv::FPFastMathModeMask =
                root::spv::FPFastMathModeMask(1);
        }
        impl FPFastMathModeMask {
            pub const FPFastMathModeNotInfMask: root::spv::FPFastMathModeMask =
                root::spv::FPFastMathModeMask(2);
        }
        impl FPFastMathModeMask {
            pub const FPFastMathModeNSZMask: root::spv::FPFastMathModeMask =
                root::spv::FPFastMathModeMask(4);
        }
        impl FPFastMathModeMask {
            pub const FPFastMathModeAllowRecipMask: root::spv::FPFastMathModeMask =
                root::spv::FPFastMathModeMask(8);
        }
        impl FPFastMathModeMask {
            pub const FPFastMathModeFastMask: root::spv::FPFastMathModeMask =
                root::spv::FPFastMathModeMask(16);
        }
        impl FPFastMathModeMask {
            pub const FPFastMathModeAllowContractFastINTELMask: root::spv::FPFastMathModeMask =
                root::spv::FPFastMathModeMask(65536);
        }
        impl FPFastMathModeMask {
            pub const FPFastMathModeAllowReassocINTELMask: root::spv::FPFastMathModeMask =
                root::spv::FPFastMathModeMask(131072);
        }
        impl ::std::ops::BitOr<root::spv::FPFastMathModeMask> for root::spv::FPFastMathModeMask {
            type Output = Self;
            #[inline]
            fn bitor(self, other: Self) -> Self {
                FPFastMathModeMask(self.0 | other.0)
            }
        }
        impl ::std::ops::BitOrAssign for root::spv::FPFastMathModeMask {
            #[inline]
            fn bitor_assign(&mut self, rhs: root::spv::FPFastMathModeMask) {
                self.0 |= rhs.0;
            }
        }
        impl ::std::ops::BitAnd<root::spv::FPFastMathModeMask> for root::spv::FPFastMathModeMask {
            type Output = Self;
            #[inline]
            fn bitand(self, other: Self) -> Self {
                FPFastMathModeMask(self.0 & other.0)
            }
        }
        impl ::std::ops::BitAndAssign for root::spv::FPFastMathModeMask {
            #[inline]
            fn bitand_assign(&mut self, rhs: root::spv::FPFastMathModeMask) {
                self.0 &= rhs.0;
            }
        }
        #[repr(transparent)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct FPFastMathModeMask(pub ::std::os::raw::c_uint);
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum FPRoundingMode {
            Rte = 0,
            Rtz = 1,
            Rtp = 2,
            Rtn = 3,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum LinkageType {
            Export = 0,
            Import = 1,
            LinkOnceOdr = 2,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum AccessQualifier {
            ReadOnly = 0,
            WriteOnly = 1,
            ReadWrite = 2,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum FunctionParameterAttribute {
            Zext = 0,
            Sext = 1,
            ByVal = 2,
            Sret = 3,
            NoAlias = 4,
            NoCapture = 5,
            NoWrite = 6,
            NoReadWrite = 7,
        }
        impl root::spv::Decoration {
            pub const PerPrimitiveNv: root::spv::Decoration = Decoration::PerPrimitiveExt;
        }
        impl root::spv::Decoration {
            pub const PerVertexNv: root::spv::Decoration = Decoration::PerVertexKhr;
        }
        impl root::spv::Decoration {
            pub const NonUniformExt: root::spv::Decoration = Decoration::NonUniform;
        }
        impl root::spv::Decoration {
            pub const RestrictPointerExt: root::spv::Decoration = Decoration::RestrictPointer;
        }
        impl root::spv::Decoration {
            pub const AliasedPointerExt: root::spv::Decoration = Decoration::AliasedPointer;
        }
        impl root::spv::Decoration {
            pub const HlslCounterBufferGoogle: root::spv::Decoration = Decoration::CounterBuffer;
        }
        impl root::spv::Decoration {
            pub const UserSemantic: root::spv::Decoration = Decoration::HlslSemanticGoogle;
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum Decoration {
            RelaxedPrecision = 0,
            SpecId = 1,
            Block = 2,
            BufferBlock = 3,
            RowMajor = 4,
            ColMajor = 5,
            ArrayStride = 6,
            MatrixStride = 7,
            GlslShared = 8,
            GlslPacked = 9,
            CPacked = 10,
            BuiltIn = 11,
            NoPerspective = 13,
            Flat = 14,
            Patch = 15,
            Centroid = 16,
            Sample = 17,
            Invariant = 18,
            Restrict = 19,
            Aliased = 20,
            Volatile = 21,
            Constant = 22,
            Coherent = 23,
            NonWritable = 24,
            NonReadable = 25,
            Uniform = 26,
            UniformId = 27,
            SaturatedConversion = 28,
            Stream = 29,
            Location = 30,
            Component = 31,
            Index = 32,
            Binding = 33,
            DescriptorSet = 34,
            Offset = 35,
            XfbBuffer = 36,
            XfbStride = 37,
            FuncParamAttr = 38,
            FpRoundingMode = 39,
            FpFastMathMode = 40,
            LinkageAttributes = 41,
            NoContraction = 42,
            InputAttachmentIndex = 43,
            Alignment = 44,
            MaxByteOffset = 45,
            AlignmentId = 46,
            MaxByteOffsetId = 47,
            NoSignedWrap = 4469,
            NoUnsignedWrap = 4470,
            ExplicitInterpAmd = 4999,
            OverrideCoverageNv = 5248,
            PassthroughNv = 5250,
            ViewportRelativeNv = 5252,
            SecondaryViewportRelativeNv = 5256,
            PerPrimitiveExt = 5271,
            PerViewNv = 5272,
            PerTaskNv = 5273,
            PerVertexKhr = 5285,
            NonUniform = 5300,
            RestrictPointer = 5355,
            AliasedPointer = 5356,
            BindlessSamplerNv = 5398,
            BindlessImageNv = 5399,
            BoundSamplerNv = 5400,
            BoundImageNv = 5401,
            SimtCallIntel = 5599,
            ReferencedIndirectlyIntel = 5602,
            ClobberIntel = 5607,
            SideEffectsIntel = 5608,
            VectorComputeVariableIntel = 5624,
            FuncParamIoKindIntel = 5625,
            VectorComputeFunctionIntel = 5626,
            StackCallIntel = 5627,
            GlobalVariableOffsetIntel = 5628,
            CounterBuffer = 5634,
            HlslSemanticGoogle = 5635,
            UserTypeGoogle = 5636,
            FunctionRoundingModeIntel = 5822,
            FunctionDenormModeIntel = 5823,
            RegisterIntel = 5825,
            MemoryIntel = 5826,
            NumbanksIntel = 5827,
            BankwidthIntel = 5828,
            MaxPrivateCopiesIntel = 5829,
            SinglepumpIntel = 5830,
            DoublepumpIntel = 5831,
            MaxReplicatesIntel = 5832,
            SimpleDualPortIntel = 5833,
            MergeIntel = 5834,
            BankBitsIntel = 5835,
            ForcePow2DepthIntel = 5836,
            BurstCoalesceIntel = 5899,
            CacheSizeIntel = 5900,
            DontStaticallyCoalesceIntel = 5901,
            PrefetchIntel = 5902,
            StallEnableIntel = 5905,
            FuseLoopsInFunctionIntel = 5907,
            AliasScopeIntel = 5914,
            NoAliasIntel = 5915,
            BufferLocationIntel = 5921,
            IoPipeStorageIntel = 5944,
            FunctionFloatingPointModeIntel = 6080,
            SingleElementVectorIntel = 6085,
            VectorComputeCallableFunctionIntel = 6087,
            MediaBlockIointel = 6140,
        }
        impl root::spv::BuiltIn {
            pub const SubgroupEqMaskKhr: root::spv::BuiltIn = BuiltIn::SubgroupEqMask;
        }
        impl root::spv::BuiltIn {
            pub const SubgroupGeMaskKhr: root::spv::BuiltIn = BuiltIn::SubgroupGeMask;
        }
        impl root::spv::BuiltIn {
            pub const SubgroupGtMaskKhr: root::spv::BuiltIn = BuiltIn::SubgroupGtMask;
        }
        impl root::spv::BuiltIn {
            pub const SubgroupLeMaskKhr: root::spv::BuiltIn = BuiltIn::SubgroupLeMask;
        }
        impl root::spv::BuiltIn {
            pub const SubgroupLtMaskKhr: root::spv::BuiltIn = BuiltIn::SubgroupLtMask;
        }
        impl root::spv::BuiltIn {
            pub const BaryCoordNv: root::spv::BuiltIn = BuiltIn::BaryCoordKhr;
        }
        impl root::spv::BuiltIn {
            pub const BaryCoordNoPerspNv: root::spv::BuiltIn = BuiltIn::BaryCoordNoPerspKhr;
        }
        impl root::spv::BuiltIn {
            pub const FragmentSizeNv: root::spv::BuiltIn = BuiltIn::FragSizeExt;
        }
        impl root::spv::BuiltIn {
            pub const InvocationsPerPixelNv: root::spv::BuiltIn = BuiltIn::FragInvocationCountExt;
        }
        impl root::spv::BuiltIn {
            pub const LaunchIdNv: root::spv::BuiltIn = BuiltIn::LaunchIdKhr;
        }
        impl root::spv::BuiltIn {
            pub const LaunchSizeNv: root::spv::BuiltIn = BuiltIn::LaunchSizeKhr;
        }
        impl root::spv::BuiltIn {
            pub const WorldRayOriginNv: root::spv::BuiltIn = BuiltIn::WorldRayOriginKhr;
        }
        impl root::spv::BuiltIn {
            pub const WorldRayDirectionNv: root::spv::BuiltIn = BuiltIn::WorldRayDirectionKhr;
        }
        impl root::spv::BuiltIn {
            pub const ObjectRayOriginNv: root::spv::BuiltIn = BuiltIn::ObjectRayOriginKhr;
        }
        impl root::spv::BuiltIn {
            pub const ObjectRayDirectionNv: root::spv::BuiltIn = BuiltIn::ObjectRayDirectionKhr;
        }
        impl root::spv::BuiltIn {
            pub const RayTminNv: root::spv::BuiltIn = BuiltIn::RayTminKhr;
        }
        impl root::spv::BuiltIn {
            pub const RayTmaxNv: root::spv::BuiltIn = BuiltIn::RayTmaxKhr;
        }
        impl root::spv::BuiltIn {
            pub const InstanceCustomIndexNv: root::spv::BuiltIn = BuiltIn::InstanceCustomIndexKhr;
        }
        impl root::spv::BuiltIn {
            pub const ObjectToWorldNv: root::spv::BuiltIn = BuiltIn::ObjectToWorldKhr;
        }
        impl root::spv::BuiltIn {
            pub const WorldToObjectNv: root::spv::BuiltIn = BuiltIn::WorldToObjectKhr;
        }
        impl root::spv::BuiltIn {
            pub const HitKindNv: root::spv::BuiltIn = BuiltIn::HitKindKhr;
        }
        impl root::spv::BuiltIn {
            pub const IncomingRayFlagsNv: root::spv::BuiltIn = BuiltIn::IncomingRayFlagsKhr;
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum BuiltIn {
            Position = 0,
            PointSize = 1,
            ClipDistance = 3,
            CullDistance = 4,
            VertexId = 5,
            InstanceId = 6,
            PrimitiveId = 7,
            InvocationId = 8,
            Layer = 9,
            ViewportIndex = 10,
            TessLevelOuter = 11,
            TessLevelInner = 12,
            TessCoord = 13,
            PatchVertices = 14,
            FragCoord = 15,
            PointCoord = 16,
            FrontFacing = 17,
            SampleId = 18,
            SamplePosition = 19,
            SampleMask = 20,
            FragDepth = 22,
            HelperInvocation = 23,
            NumWorkgroups = 24,
            WorkgroupSize = 25,
            WorkgroupId = 26,
            LocalInvocationId = 27,
            GlobalInvocationId = 28,
            LocalInvocationIndex = 29,
            WorkDim = 30,
            GlobalSize = 31,
            EnqueuedWorkgroupSize = 32,
            GlobalOffset = 33,
            GlobalLinearId = 34,
            SubgroupSize = 36,
            SubgroupMaxSize = 37,
            NumSubgroups = 38,
            NumEnqueuedSubgroups = 39,
            SubgroupId = 40,
            SubgroupLocalInvocationId = 41,
            VertexIndex = 42,
            InstanceIndex = 43,
            SubgroupEqMask = 4416,
            SubgroupGeMask = 4417,
            SubgroupGtMask = 4418,
            SubgroupLeMask = 4419,
            SubgroupLtMask = 4420,
            BaseVertex = 4424,
            BaseInstance = 4425,
            DrawIndex = 4426,
            PrimitiveShadingRateKhr = 4432,
            DeviceIndex = 4438,
            ViewIndex = 4440,
            ShadingRateKhr = 4444,
            BaryCoordNoPerspAmd = 4992,
            BaryCoordNoPerspCentroidAmd = 4993,
            BaryCoordNoPerspSampleAmd = 4994,
            BaryCoordSmoothAmd = 4995,
            BaryCoordSmoothCentroidAmd = 4996,
            BaryCoordSmoothSampleAmd = 4997,
            BaryCoordPullModelAmd = 4998,
            FragStencilRefExt = 5014,
            ViewportMaskNv = 5253,
            SecondaryPositionNv = 5257,
            SecondaryViewportMaskNv = 5258,
            PositionPerViewNv = 5261,
            ViewportMaskPerViewNv = 5262,
            FullyCoveredExt = 5264,
            TaskCountNv = 5274,
            PrimitiveCountNv = 5275,
            PrimitiveIndicesNv = 5276,
            ClipDistancePerViewNv = 5277,
            CullDistancePerViewNv = 5278,
            LayerPerViewNv = 5279,
            MeshViewCountNv = 5280,
            MeshViewIndicesNv = 5281,
            BaryCoordKhr = 5286,
            BaryCoordNoPerspKhr = 5287,
            FragSizeExt = 5292,
            FragInvocationCountExt = 5293,
            PrimitivePointIndicesExt = 5294,
            PrimitiveLineIndicesExt = 5295,
            PrimitiveTriangleIndicesExt = 5296,
            CullPrimitiveExt = 5299,
            LaunchIdKhr = 5319,
            LaunchSizeKhr = 5320,
            WorldRayOriginKhr = 5321,
            WorldRayDirectionKhr = 5322,
            ObjectRayOriginKhr = 5323,
            ObjectRayDirectionKhr = 5324,
            RayTminKhr = 5325,
            RayTmaxKhr = 5326,
            InstanceCustomIndexKhr = 5327,
            ObjectToWorldKhr = 5330,
            WorldToObjectKhr = 5331,
            HitTnv = 5332,
            HitKindKhr = 5333,
            CurrentRayTimeNv = 5334,
            IncomingRayFlagsKhr = 5351,
            RayGeometryIndexKhr = 5352,
            WarpsPerSmnv = 5374,
            SmCountNv = 5375,
            WarpIdnv = 5376,
            Smidnv = 5377,
            CullMaskKhr = 6021,
            Max = 2147483647,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum SelectionControlShift {
            SelectionControlFlattenShift = 0,
            SelectionControlDontFlattenShift = 1,
        }
        impl SelectionControlMask {
            pub const None: root::spv::SelectionControlMask = root::spv::SelectionControlMask(0);
        }
        impl SelectionControlMask {
            pub const SelectionControlFlattenMask: root::spv::SelectionControlMask =
                root::spv::SelectionControlMask(1);
        }
        impl SelectionControlMask {
            pub const SelectionControlDontFlattenMask: root::spv::SelectionControlMask =
                root::spv::SelectionControlMask(2);
        }
        impl ::std::ops::BitOr<root::spv::SelectionControlMask> for root::spv::SelectionControlMask {
            type Output = Self;
            #[inline]
            fn bitor(self, other: Self) -> Self {
                SelectionControlMask(self.0 | other.0)
            }
        }
        impl ::std::ops::BitOrAssign for root::spv::SelectionControlMask {
            #[inline]
            fn bitor_assign(&mut self, rhs: root::spv::SelectionControlMask) {
                self.0 |= rhs.0;
            }
        }
        impl ::std::ops::BitAnd<root::spv::SelectionControlMask> for root::spv::SelectionControlMask {
            type Output = Self;
            #[inline]
            fn bitand(self, other: Self) -> Self {
                SelectionControlMask(self.0 & other.0)
            }
        }
        impl ::std::ops::BitAndAssign for root::spv::SelectionControlMask {
            #[inline]
            fn bitand_assign(&mut self, rhs: root::spv::SelectionControlMask) {
                self.0 &= rhs.0;
            }
        }
        #[repr(transparent)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct SelectionControlMask(pub ::std::os::raw::c_uint);
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum LoopControlShift {
            LoopControlUnrollShift = 0,
            LoopControlDontUnrollShift = 1,
            LoopControlDependencyInfiniteShift = 2,
            LoopControlDependencyLengthShift = 3,
            LoopControlMinIterationsShift = 4,
            LoopControlMaxIterationsShift = 5,
            LoopControlIterationMultipleShift = 6,
            LoopControlPeelCountShift = 7,
            LoopControlPartialCountShift = 8,
            LoopControlInitiationIntervalINTELShift = 16,
            LoopControlMaxConcurrencyINTELShift = 17,
            LoopControlDependencyArrayINTELShift = 18,
            LoopControlPipelineEnableINTELShift = 19,
            LoopControlLoopCoalesceINTELShift = 20,
            LoopControlMaxInterleavingINTELShift = 21,
            LoopControlSpeculatedIterationsINTELShift = 22,
            LoopControlNoFusionINTELShift = 23,
        }
        impl LoopControlMask {
            pub const None: root::spv::LoopControlMask = root::spv::LoopControlMask(0);
        }
        impl LoopControlMask {
            pub const LoopControlUnrollMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(1);
        }
        impl LoopControlMask {
            pub const LoopControlDontUnrollMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(2);
        }
        impl LoopControlMask {
            pub const LoopControlDependencyInfiniteMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(4);
        }
        impl LoopControlMask {
            pub const LoopControlDependencyLengthMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(8);
        }
        impl LoopControlMask {
            pub const LoopControlMinIterationsMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(16);
        }
        impl LoopControlMask {
            pub const LoopControlMaxIterationsMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(32);
        }
        impl LoopControlMask {
            pub const LoopControlIterationMultipleMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(64);
        }
        impl LoopControlMask {
            pub const LoopControlPeelCountMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(128);
        }
        impl LoopControlMask {
            pub const LoopControlPartialCountMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(256);
        }
        impl LoopControlMask {
            pub const LoopControlInitiationIntervalINTELMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(65536);
        }
        impl LoopControlMask {
            pub const LoopControlMaxConcurrencyINTELMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(131072);
        }
        impl LoopControlMask {
            pub const LoopControlDependencyArrayINTELMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(262144);
        }
        impl LoopControlMask {
            pub const LoopControlPipelineEnableINTELMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(524288);
        }
        impl LoopControlMask {
            pub const LoopControlLoopCoalesceINTELMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(1048576);
        }
        impl LoopControlMask {
            pub const LoopControlMaxInterleavingINTELMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(2097152);
        }
        impl LoopControlMask {
            pub const LoopControlSpeculatedIterationsINTELMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(4194304);
        }
        impl LoopControlMask {
            pub const LoopControlNoFusionINTELMask: root::spv::LoopControlMask =
                root::spv::LoopControlMask(8388608);
        }
        impl ::std::ops::BitOr<root::spv::LoopControlMask> for root::spv::LoopControlMask {
            type Output = Self;
            #[inline]
            fn bitor(self, other: Self) -> Self {
                LoopControlMask(self.0 | other.0)
            }
        }
        impl ::std::ops::BitOrAssign for root::spv::LoopControlMask {
            #[inline]
            fn bitor_assign(&mut self, rhs: root::spv::LoopControlMask) {
                self.0 |= rhs.0;
            }
        }
        impl ::std::ops::BitAnd<root::spv::LoopControlMask> for root::spv::LoopControlMask {
            type Output = Self;
            #[inline]
            fn bitand(self, other: Self) -> Self {
                LoopControlMask(self.0 & other.0)
            }
        }
        impl ::std::ops::BitAndAssign for root::spv::LoopControlMask {
            #[inline]
            fn bitand_assign(&mut self, rhs: root::spv::LoopControlMask) {
                self.0 &= rhs.0;
            }
        }
        #[repr(transparent)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct LoopControlMask(pub ::std::os::raw::c_uint);
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum FunctionControlShift {
            FunctionControlInlineShift = 0,
            FunctionControlDontInlineShift = 1,
            FunctionControlPureShift = 2,
            FunctionControlConstShift = 3,
            FunctionControlOptNoneINTELShift = 16,
        }
        impl FunctionControlMask {
            pub const None: root::spv::FunctionControlMask = root::spv::FunctionControlMask(0);
        }
        impl FunctionControlMask {
            pub const FunctionControlInlineMask: root::spv::FunctionControlMask =
                root::spv::FunctionControlMask(1);
        }
        impl FunctionControlMask {
            pub const FunctionControlDontInlineMask: root::spv::FunctionControlMask =
                root::spv::FunctionControlMask(2);
        }
        impl FunctionControlMask {
            pub const FunctionControlPureMask: root::spv::FunctionControlMask =
                root::spv::FunctionControlMask(4);
        }
        impl FunctionControlMask {
            pub const FunctionControlConstMask: root::spv::FunctionControlMask =
                root::spv::FunctionControlMask(8);
        }
        impl FunctionControlMask {
            pub const FunctionControlOptNoneINTELMask: root::spv::FunctionControlMask =
                root::spv::FunctionControlMask(65536);
        }
        impl ::std::ops::BitOr<root::spv::FunctionControlMask> for root::spv::FunctionControlMask {
            type Output = Self;
            #[inline]
            fn bitor(self, other: Self) -> Self {
                FunctionControlMask(self.0 | other.0)
            }
        }
        impl ::std::ops::BitOrAssign for root::spv::FunctionControlMask {
            #[inline]
            fn bitor_assign(&mut self, rhs: root::spv::FunctionControlMask) {
                self.0 |= rhs.0;
            }
        }
        impl ::std::ops::BitAnd<root::spv::FunctionControlMask> for root::spv::FunctionControlMask {
            type Output = Self;
            #[inline]
            fn bitand(self, other: Self) -> Self {
                FunctionControlMask(self.0 & other.0)
            }
        }
        impl ::std::ops::BitAndAssign for root::spv::FunctionControlMask {
            #[inline]
            fn bitand_assign(&mut self, rhs: root::spv::FunctionControlMask) {
                self.0 &= rhs.0;
            }
        }
        #[repr(transparent)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct FunctionControlMask(pub ::std::os::raw::c_uint);
        impl root::spv::MemorySemanticsShift {
            pub const MemorySemanticsOutputMemoryKHRShift: root::spv::MemorySemanticsShift =
                MemorySemanticsShift::MemorySemanticsOutputMemoryShift;
        }
        impl root::spv::MemorySemanticsShift {
            pub const MemorySemanticsMakeAvailableKHRShift: root::spv::MemorySemanticsShift =
                MemorySemanticsShift::MemorySemanticsMakeAvailableShift;
        }
        impl root::spv::MemorySemanticsShift {
            pub const MemorySemanticsMakeVisibleKHRShift: root::spv::MemorySemanticsShift =
                MemorySemanticsShift::MemorySemanticsMakeVisibleShift;
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum MemorySemanticsShift {
            MemorySemanticsAcquireShift = 1,
            MemorySemanticsReleaseShift = 2,
            MemorySemanticsAcquireReleaseShift = 3,
            MemorySemanticsSequentiallyConsistentShift = 4,
            MemorySemanticsUniformMemoryShift = 6,
            MemorySemanticsSubgroupMemoryShift = 7,
            MemorySemanticsWorkgroupMemoryShift = 8,
            MemorySemanticsCrossWorkgroupMemoryShift = 9,
            MemorySemanticsAtomicCounterMemoryShift = 10,
            MemorySemanticsImageMemoryShift = 11,
            MemorySemanticsOutputMemoryShift = 12,
            MemorySemanticsMakeAvailableShift = 13,
            MemorySemanticsMakeVisibleShift = 14,
            MemorySemanticsVolatileShift = 15,
        }
        impl MemorySemanticsMask {
            pub const None: root::spv::MemorySemanticsMask = root::spv::MemorySemanticsMask(0);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsAcquireMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(2);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsReleaseMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(4);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsAcquireReleaseMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(8);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsSequentiallyConsistentMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(16);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsUniformMemoryMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(64);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsSubgroupMemoryMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(128);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsWorkgroupMemoryMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(256);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsCrossWorkgroupMemoryMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(512);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsAtomicCounterMemoryMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(1024);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsImageMemoryMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(2048);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsOutputMemoryMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(4096);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsOutputMemoryKHRMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(4096);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsMakeAvailableMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(8192);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsMakeAvailableKHRMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(8192);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsMakeVisibleMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(16384);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsMakeVisibleKHRMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(16384);
        }
        impl MemorySemanticsMask {
            pub const MemorySemanticsVolatileMask: root::spv::MemorySemanticsMask =
                root::spv::MemorySemanticsMask(32768);
        }
        impl ::std::ops::BitOr<root::spv::MemorySemanticsMask> for root::spv::MemorySemanticsMask {
            type Output = Self;
            #[inline]
            fn bitor(self, other: Self) -> Self {
                MemorySemanticsMask(self.0 | other.0)
            }
        }
        impl ::std::ops::BitOrAssign for root::spv::MemorySemanticsMask {
            #[inline]
            fn bitor_assign(&mut self, rhs: root::spv::MemorySemanticsMask) {
                self.0 |= rhs.0;
            }
        }
        impl ::std::ops::BitAnd<root::spv::MemorySemanticsMask> for root::spv::MemorySemanticsMask {
            type Output = Self;
            #[inline]
            fn bitand(self, other: Self) -> Self {
                MemorySemanticsMask(self.0 & other.0)
            }
        }
        impl ::std::ops::BitAndAssign for root::spv::MemorySemanticsMask {
            #[inline]
            fn bitand_assign(&mut self, rhs: root::spv::MemorySemanticsMask) {
                self.0 &= rhs.0;
            }
        }
        #[repr(transparent)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct MemorySemanticsMask(pub ::std::os::raw::c_uint);
        impl root::spv::MemoryAccessShift {
            pub const MemoryAccessMakePointerAvailableKHRShift: root::spv::MemoryAccessShift =
                MemoryAccessShift::MemoryAccessMakePointerAvailableShift;
        }
        impl root::spv::MemoryAccessShift {
            pub const MemoryAccessMakePointerVisibleKHRShift: root::spv::MemoryAccessShift =
                MemoryAccessShift::MemoryAccessMakePointerVisibleShift;
        }
        impl root::spv::MemoryAccessShift {
            pub const MemoryAccessNonPrivatePointerKHRShift: root::spv::MemoryAccessShift =
                MemoryAccessShift::MemoryAccessNonPrivatePointerShift;
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum MemoryAccessShift {
            MemoryAccessVolatileShift = 0,
            MemoryAccessAlignedShift = 1,
            MemoryAccessNontemporalShift = 2,
            MemoryAccessMakePointerAvailableShift = 3,
            MemoryAccessMakePointerVisibleShift = 4,
            MemoryAccessNonPrivatePointerShift = 5,
            MemoryAccessAliasScopeINTELMaskShift = 16,
            MemoryAccessNoAliasINTELMaskShift = 17,
        }
        impl MemoryAccessMask {
            pub const None: root::spv::MemoryAccessMask = root::spv::MemoryAccessMask(0);
        }
        impl MemoryAccessMask {
            pub const MemoryAccessVolatileMask: root::spv::MemoryAccessMask =
                root::spv::MemoryAccessMask(1);
        }
        impl MemoryAccessMask {
            pub const MemoryAccessAlignedMask: root::spv::MemoryAccessMask =
                root::spv::MemoryAccessMask(2);
        }
        impl MemoryAccessMask {
            pub const MemoryAccessNontemporalMask: root::spv::MemoryAccessMask =
                root::spv::MemoryAccessMask(4);
        }
        impl MemoryAccessMask {
            pub const MemoryAccessMakePointerAvailableMask: root::spv::MemoryAccessMask =
                root::spv::MemoryAccessMask(8);
        }
        impl MemoryAccessMask {
            pub const MemoryAccessMakePointerAvailableKHRMask: root::spv::MemoryAccessMask =
                root::spv::MemoryAccessMask(8);
        }
        impl MemoryAccessMask {
            pub const MemoryAccessMakePointerVisibleMask: root::spv::MemoryAccessMask =
                root::spv::MemoryAccessMask(16);
        }
        impl MemoryAccessMask {
            pub const MemoryAccessMakePointerVisibleKHRMask: root::spv::MemoryAccessMask =
                root::spv::MemoryAccessMask(16);
        }
        impl MemoryAccessMask {
            pub const MemoryAccessNonPrivatePointerMask: root::spv::MemoryAccessMask =
                root::spv::MemoryAccessMask(32);
        }
        impl MemoryAccessMask {
            pub const MemoryAccessNonPrivatePointerKHRMask: root::spv::MemoryAccessMask =
                root::spv::MemoryAccessMask(32);
        }
        impl MemoryAccessMask {
            pub const MemoryAccessAliasScopeINTELMaskMask: root::spv::MemoryAccessMask =
                root::spv::MemoryAccessMask(65536);
        }
        impl MemoryAccessMask {
            pub const MemoryAccessNoAliasINTELMaskMask: root::spv::MemoryAccessMask =
                root::spv::MemoryAccessMask(131072);
        }
        impl ::std::ops::BitOr<root::spv::MemoryAccessMask> for root::spv::MemoryAccessMask {
            type Output = Self;
            #[inline]
            fn bitor(self, other: Self) -> Self {
                MemoryAccessMask(self.0 | other.0)
            }
        }
        impl ::std::ops::BitOrAssign for root::spv::MemoryAccessMask {
            #[inline]
            fn bitor_assign(&mut self, rhs: root::spv::MemoryAccessMask) {
                self.0 |= rhs.0;
            }
        }
        impl ::std::ops::BitAnd<root::spv::MemoryAccessMask> for root::spv::MemoryAccessMask {
            type Output = Self;
            #[inline]
            fn bitand(self, other: Self) -> Self {
                MemoryAccessMask(self.0 & other.0)
            }
        }
        impl ::std::ops::BitAndAssign for root::spv::MemoryAccessMask {
            #[inline]
            fn bitand_assign(&mut self, rhs: root::spv::MemoryAccessMask) {
                self.0 &= rhs.0;
            }
        }
        #[repr(transparent)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct MemoryAccessMask(pub ::std::os::raw::c_uint);
        impl root::spv::Scope {
            pub const QueueFamilyKhr: root::spv::Scope = Scope::QueueFamily;
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum Scope {
            CrossDevice = 0,
            Device = 1,
            Workgroup = 2,
            Subgroup = 3,
            Invocation = 4,
            QueueFamily = 5,
            ShaderCallKhr = 6,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum GroupOperation {
            Reduce = 0,
            InclusiveScan = 1,
            ExclusiveScan = 2,
            ClusteredReduce = 3,
            PartitionedReduceNv = 6,
            PartitionedInclusiveScanNv = 7,
            PartitionedExclusiveScanNv = 8,
        }
        impl KernelEnqueueFlags {
            pub const NoWait: root::spv::KernelEnqueueFlags = root::spv::KernelEnqueueFlags(0);
        }
        impl KernelEnqueueFlags {
            pub const WaitKernel: root::spv::KernelEnqueueFlags = root::spv::KernelEnqueueFlags(1);
        }
        impl KernelEnqueueFlags {
            pub const WaitWorkGroup: root::spv::KernelEnqueueFlags =
                root::spv::KernelEnqueueFlags(2);
        }
        impl ::std::ops::BitOr<root::spv::KernelEnqueueFlags> for root::spv::KernelEnqueueFlags {
            type Output = Self;
            #[inline]
            fn bitor(self, other: Self) -> Self {
                KernelEnqueueFlags(self.0 | other.0)
            }
        }
        impl ::std::ops::BitOrAssign for root::spv::KernelEnqueueFlags {
            #[inline]
            fn bitor_assign(&mut self, rhs: root::spv::KernelEnqueueFlags) {
                self.0 |= rhs.0;
            }
        }
        impl ::std::ops::BitAnd<root::spv::KernelEnqueueFlags> for root::spv::KernelEnqueueFlags {
            type Output = Self;
            #[inline]
            fn bitand(self, other: Self) -> Self {
                KernelEnqueueFlags(self.0 & other.0)
            }
        }
        impl ::std::ops::BitAndAssign for root::spv::KernelEnqueueFlags {
            #[inline]
            fn bitand_assign(&mut self, rhs: root::spv::KernelEnqueueFlags) {
                self.0 &= rhs.0;
            }
        }
        #[repr(transparent)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct KernelEnqueueFlags(pub ::std::os::raw::c_uint);
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum KernelProfilingInfoShift {
            KernelProfilingInfoCmdExecTimeShift = 0,
        }
        impl KernelProfilingInfoMask {
            pub const None: root::spv::KernelProfilingInfoMask =
                root::spv::KernelProfilingInfoMask(0);
        }
        impl KernelProfilingInfoMask {
            pub const KernelProfilingInfoCmdExecTimeMask: root::spv::KernelProfilingInfoMask =
                root::spv::KernelProfilingInfoMask(1);
        }
        impl ::std::ops::BitOr<root::spv::KernelProfilingInfoMask> for root::spv::KernelProfilingInfoMask {
            type Output = Self;
            #[inline]
            fn bitor(self, other: Self) -> Self {
                KernelProfilingInfoMask(self.0 | other.0)
            }
        }
        impl ::std::ops::BitOrAssign for root::spv::KernelProfilingInfoMask {
            #[inline]
            fn bitor_assign(&mut self, rhs: root::spv::KernelProfilingInfoMask) {
                self.0 |= rhs.0;
            }
        }
        impl ::std::ops::BitAnd<root::spv::KernelProfilingInfoMask> for root::spv::KernelProfilingInfoMask {
            type Output = Self;
            #[inline]
            fn bitand(self, other: Self) -> Self {
                KernelProfilingInfoMask(self.0 & other.0)
            }
        }
        impl ::std::ops::BitAndAssign for root::spv::KernelProfilingInfoMask {
            #[inline]
            fn bitand_assign(&mut self, rhs: root::spv::KernelProfilingInfoMask) {
                self.0 &= rhs.0;
            }
        }
        #[repr(transparent)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct KernelProfilingInfoMask(pub ::std::os::raw::c_uint);
        impl root::spv::Capability {
            pub const StorageUniformBufferBlock16: root::spv::Capability =
                Capability::StorageBuffer16BitAccess;
        }
        impl root::spv::Capability {
            pub const UniformAndStorageBuffer16BitAccess: root::spv::Capability =
                Capability::StorageUniform16;
        }
        impl root::spv::Capability {
            pub const ShaderViewportIndexLayerNv: root::spv::Capability =
                Capability::ShaderViewportIndexLayerExt;
        }
        impl root::spv::Capability {
            pub const FragmentBarycentricNv: root::spv::Capability =
                Capability::FragmentBarycentricKhr;
        }
        impl root::spv::Capability {
            pub const ShadingRateNv: root::spv::Capability = Capability::FragmentDensityExt;
        }
        impl root::spv::Capability {
            pub const ShaderNonUniformExt: root::spv::Capability = Capability::ShaderNonUniform;
        }
        impl root::spv::Capability {
            pub const RuntimeDescriptorArrayExt: root::spv::Capability =
                Capability::RuntimeDescriptorArray;
        }
        impl root::spv::Capability {
            pub const InputAttachmentArrayDynamicIndexingExt: root::spv::Capability =
                Capability::InputAttachmentArrayDynamicIndexing;
        }
        impl root::spv::Capability {
            pub const UniformTexelBufferArrayDynamicIndexingExt: root::spv::Capability =
                Capability::UniformTexelBufferArrayDynamicIndexing;
        }
        impl root::spv::Capability {
            pub const StorageTexelBufferArrayDynamicIndexingExt: root::spv::Capability =
                Capability::StorageTexelBufferArrayDynamicIndexing;
        }
        impl root::spv::Capability {
            pub const UniformBufferArrayNonUniformIndexingExt: root::spv::Capability =
                Capability::UniformBufferArrayNonUniformIndexing;
        }
        impl root::spv::Capability {
            pub const SampledImageArrayNonUniformIndexingExt: root::spv::Capability =
                Capability::SampledImageArrayNonUniformIndexing;
        }
        impl root::spv::Capability {
            pub const StorageBufferArrayNonUniformIndexingExt: root::spv::Capability =
                Capability::StorageBufferArrayNonUniformIndexing;
        }
        impl root::spv::Capability {
            pub const StorageImageArrayNonUniformIndexingExt: root::spv::Capability =
                Capability::StorageImageArrayNonUniformIndexing;
        }
        impl root::spv::Capability {
            pub const InputAttachmentArrayNonUniformIndexingExt: root::spv::Capability =
                Capability::InputAttachmentArrayNonUniformIndexing;
        }
        impl root::spv::Capability {
            pub const UniformTexelBufferArrayNonUniformIndexingExt: root::spv::Capability =
                Capability::UniformTexelBufferArrayNonUniformIndexing;
        }
        impl root::spv::Capability {
            pub const StorageTexelBufferArrayNonUniformIndexingExt: root::spv::Capability =
                Capability::StorageTexelBufferArrayNonUniformIndexing;
        }
        impl root::spv::Capability {
            pub const VulkanMemoryModelKhr: root::spv::Capability = Capability::VulkanMemoryModel;
        }
        impl root::spv::Capability {
            pub const VulkanMemoryModelDeviceScopeKhr: root::spv::Capability =
                Capability::VulkanMemoryModelDeviceScope;
        }
        impl root::spv::Capability {
            pub const PhysicalStorageBufferAddressesExt: root::spv::Capability =
                Capability::PhysicalStorageBufferAddresses;
        }
        impl root::spv::Capability {
            pub const DemoteToHelperInvocationExt: root::spv::Capability =
                Capability::DemoteToHelperInvocation;
        }
        impl root::spv::Capability {
            pub const DotProductInputAllKhr: root::spv::Capability = Capability::DotProductInputAll;
        }
        impl root::spv::Capability {
            pub const DotProductInput4X8BitKhr: root::spv::Capability =
                Capability::DotProductInput4X8Bit;
        }
        impl root::spv::Capability {
            pub const DotProductInput4X8BitPackedKhr: root::spv::Capability =
                Capability::DotProductInput4X8BitPacked;
        }
        impl root::spv::Capability {
            pub const DotProductKhr: root::spv::Capability = Capability::DotProduct;
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum Capability {
            Matrix = 0,
            Shader = 1,
            Geometry = 2,
            Tessellation = 3,
            Addresses = 4,
            Linkage = 5,
            Kernel = 6,
            Vector16 = 7,
            Float16Buffer = 8,
            Float16 = 9,
            Float64 = 10,
            Int64 = 11,
            Int64Atomics = 12,
            ImageBasic = 13,
            ImageReadWrite = 14,
            ImageMipmap = 15,
            Pipes = 17,
            Groups = 18,
            DeviceEnqueue = 19,
            LiteralSampler = 20,
            AtomicStorage = 21,
            Int16 = 22,
            TessellationPointSize = 23,
            GeometryPointSize = 24,
            ImageGatherExtended = 25,
            StorageImageMultisample = 27,
            UniformBufferArrayDynamicIndexing = 28,
            SampledImageArrayDynamicIndexing = 29,
            StorageBufferArrayDynamicIndexing = 30,
            StorageImageArrayDynamicIndexing = 31,
            ClipDistance = 32,
            CullDistance = 33,
            ImageCubeArray = 34,
            SampleRateShading = 35,
            ImageRect = 36,
            SampledRect = 37,
            GenericPointer = 38,
            Int8 = 39,
            InputAttachment = 40,
            SparseResidency = 41,
            MinLod = 42,
            Sampled1D = 43,
            Image1D = 44,
            SampledCubeArray = 45,
            SampledBuffer = 46,
            ImageBuffer = 47,
            ImageMsArray = 48,
            StorageImageExtendedFormats = 49,
            ImageQuery = 50,
            DerivativeControl = 51,
            InterpolationFunction = 52,
            TransformFeedback = 53,
            GeometryStreams = 54,
            StorageImageReadWithoutFormat = 55,
            StorageImageWriteWithoutFormat = 56,
            MultiViewport = 57,
            SubgroupDispatch = 58,
            NamedBarrier = 59,
            PipeStorage = 60,
            GroupNonUniform = 61,
            GroupNonUniformVote = 62,
            GroupNonUniformArithmetic = 63,
            GroupNonUniformBallot = 64,
            GroupNonUniformShuffle = 65,
            GroupNonUniformShuffleRelative = 66,
            GroupNonUniformClustered = 67,
            GroupNonUniformQuad = 68,
            ShaderLayer = 69,
            ShaderViewportIndex = 70,
            UniformDecoration = 71,
            FragmentShadingRateKhr = 4422,
            SubgroupBallotKhr = 4423,
            DrawParameters = 4427,
            WorkgroupMemoryExplicitLayoutKhr = 4428,
            WorkgroupMemoryExplicitLayout8BitAccessKhr = 4429,
            WorkgroupMemoryExplicitLayout16BitAccessKhr = 4430,
            SubgroupVoteKhr = 4431,
            StorageBuffer16BitAccess = 4433,
            StorageUniform16 = 4434,
            StoragePushConstant16 = 4435,
            StorageInputOutput16 = 4436,
            DeviceGroup = 4437,
            MultiView = 4439,
            VariablePointersStorageBuffer = 4441,
            VariablePointers = 4442,
            AtomicStorageOps = 4445,
            SampleMaskPostDepthCoverage = 4447,
            StorageBuffer8BitAccess = 4448,
            UniformAndStorageBuffer8BitAccess = 4449,
            StoragePushConstant8 = 4450,
            DenormPreserve = 4464,
            DenormFlushToZero = 4465,
            SignedZeroInfNanPreserve = 4466,
            RoundingModeRte = 4467,
            RoundingModeRtz = 4468,
            RayQueryProvisionalKhr = 4471,
            RayQueryKhr = 4472,
            RayTraversalPrimitiveCullingKhr = 4478,
            RayTracingKhr = 4479,
            Float16imageAmd = 5008,
            ImageGatherBiasLodAmd = 5009,
            FragmentMaskAmd = 5010,
            StencilExportExt = 5013,
            ImageReadWriteLodAmd = 5015,
            Int64imageExt = 5016,
            ShaderClockKhr = 5055,
            SampleMaskOverrideCoverageNv = 5249,
            GeometryShaderPassthroughNv = 5251,
            ShaderViewportIndexLayerExt = 5254,
            ShaderViewportMaskNv = 5255,
            ShaderStereoViewNv = 5259,
            PerViewAttributesNv = 5260,
            FragmentFullyCoveredExt = 5265,
            MeshShadingNv = 5266,
            ImageFootprintNv = 5282,
            MeshShadingExt = 5283,
            FragmentBarycentricKhr = 5284,
            ComputeDerivativeGroupQuadsNv = 5288,
            FragmentDensityExt = 5291,
            GroupNonUniformPartitionedNv = 5297,
            ShaderNonUniform = 5301,
            RuntimeDescriptorArray = 5302,
            InputAttachmentArrayDynamicIndexing = 5303,
            UniformTexelBufferArrayDynamicIndexing = 5304,
            StorageTexelBufferArrayDynamicIndexing = 5305,
            UniformBufferArrayNonUniformIndexing = 5306,
            SampledImageArrayNonUniformIndexing = 5307,
            StorageBufferArrayNonUniformIndexing = 5308,
            StorageImageArrayNonUniformIndexing = 5309,
            InputAttachmentArrayNonUniformIndexing = 5310,
            UniformTexelBufferArrayNonUniformIndexing = 5311,
            StorageTexelBufferArrayNonUniformIndexing = 5312,
            RayTracingNv = 5340,
            RayTracingMotionBlurNv = 5341,
            VulkanMemoryModel = 5345,
            VulkanMemoryModelDeviceScope = 5346,
            PhysicalStorageBufferAddresses = 5347,
            ComputeDerivativeGroupLinearNv = 5350,
            RayTracingProvisionalKhr = 5353,
            CooperativeMatrixNv = 5357,
            FragmentShaderSampleInterlockExt = 5363,
            FragmentShaderShadingRateInterlockExt = 5372,
            ShaderSmBuiltinsNv = 5373,
            FragmentShaderPixelInterlockExt = 5378,
            DemoteToHelperInvocation = 5379,
            BindlessTextureNv = 5390,
            SubgroupShuffleIntel = 5568,
            SubgroupBufferBlockIointel = 5569,
            SubgroupImageBlockIointel = 5570,
            SubgroupImageMediaBlockIointel = 5579,
            RoundToInfinityIntel = 5582,
            FloatingPointModeIntel = 5583,
            IntegerFunctions2intel = 5584,
            FunctionPointersIntel = 5603,
            IndirectReferencesIntel = 5604,
            AsmIntel = 5606,
            AtomicFloat32MinMaxExt = 5612,
            AtomicFloat64MinMaxExt = 5613,
            AtomicFloat16MinMaxExt = 5616,
            VectorComputeIntel = 5617,
            VectorAnyIntel = 5619,
            ExpectAssumeKhr = 5629,
            SubgroupAvcMotionEstimationIntel = 5696,
            SubgroupAvcMotionEstimationIntraIntel = 5697,
            SubgroupAvcMotionEstimationChromaIntel = 5698,
            VariableLengthArrayIntel = 5817,
            FunctionFloatControlIntel = 5821,
            FpgaMemoryAttributesIntel = 5824,
            FpFastMathModeIntel = 5837,
            ArbitraryPrecisionIntegersIntel = 5844,
            ArbitraryPrecisionFloatingPointIntel = 5845,
            UnstructuredLoopControlsIntel = 5886,
            FpgaLoopControlsIntel = 5888,
            KernelAttributesIntel = 5892,
            FpgaKernelAttributesIntel = 5897,
            FpgaMemoryAccessesIntel = 5898,
            FpgaClusterAttributesIntel = 5904,
            LoopFuseIntel = 5906,
            MemoryAccessAliasingIntel = 5910,
            FpgaBufferLocationIntel = 5920,
            ArbitraryPrecisionFixedPointIntel = 5922,
            UsmStorageClassesIntel = 5935,
            IoPipesIntel = 5943,
            BlockingPipesIntel = 5945,
            FpgaRegIntel = 5948,
            DotProductInputAll = 6016,
            DotProductInput4X8Bit = 6017,
            DotProductInput4X8BitPacked = 6018,
            DotProduct = 6019,
            RayCullMaskKhr = 6020,
            BitInstructions = 6025,
            GroupNonUniformRotateKhr = 6026,
            AtomicFloat32AddExt = 6033,
            AtomicFloat64AddExt = 6034,
            LongConstantCompositeIntel = 6089,
            OptNoneIntel = 6094,
            AtomicFloat16AddExt = 6095,
            DebugInfoModuleIntel = 6114,
            SplitBarrierIntel = 6141,
            GroupUniformArithmeticKhr = 6400,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum RayFlagsShift {
            RayFlagsOpaqueKHRShift = 0,
            RayFlagsNoOpaqueKHRShift = 1,
            RayFlagsTerminateOnFirstHitKHRShift = 2,
            RayFlagsSkipClosestHitShaderKHRShift = 3,
            RayFlagsCullBackFacingTrianglesKHRShift = 4,
            RayFlagsCullFrontFacingTrianglesKHRShift = 5,
            RayFlagsCullOpaqueKHRShift = 6,
            RayFlagsCullNoOpaqueKHRShift = 7,
            RayFlagsSkipTrianglesKHRShift = 8,
            RayFlagsSkipAABBsKHRShift = 9,
        }
        impl RayFlagsMask {
            pub const None: root::spv::RayFlagsMask = root::spv::RayFlagsMask(0);
        }
        impl RayFlagsMask {
            pub const RayFlagsOpaqueKHRMask: root::spv::RayFlagsMask = root::spv::RayFlagsMask(1);
        }
        impl RayFlagsMask {
            pub const RayFlagsNoOpaqueKHRMask: root::spv::RayFlagsMask = root::spv::RayFlagsMask(2);
        }
        impl RayFlagsMask {
            pub const RayFlagsTerminateOnFirstHitKHRMask: root::spv::RayFlagsMask =
                root::spv::RayFlagsMask(4);
        }
        impl RayFlagsMask {
            pub const RayFlagsSkipClosestHitShaderKHRMask: root::spv::RayFlagsMask =
                root::spv::RayFlagsMask(8);
        }
        impl RayFlagsMask {
            pub const RayFlagsCullBackFacingTrianglesKHRMask: root::spv::RayFlagsMask =
                root::spv::RayFlagsMask(16);
        }
        impl RayFlagsMask {
            pub const RayFlagsCullFrontFacingTrianglesKHRMask: root::spv::RayFlagsMask =
                root::spv::RayFlagsMask(32);
        }
        impl RayFlagsMask {
            pub const RayFlagsCullOpaqueKHRMask: root::spv::RayFlagsMask =
                root::spv::RayFlagsMask(64);
        }
        impl RayFlagsMask {
            pub const RayFlagsCullNoOpaqueKHRMask: root::spv::RayFlagsMask =
                root::spv::RayFlagsMask(128);
        }
        impl RayFlagsMask {
            pub const RayFlagsSkipTrianglesKHRMask: root::spv::RayFlagsMask =
                root::spv::RayFlagsMask(256);
        }
        impl RayFlagsMask {
            pub const RayFlagsSkipAABBsKHRMask: root::spv::RayFlagsMask =
                root::spv::RayFlagsMask(512);
        }
        impl ::std::ops::BitOr<root::spv::RayFlagsMask> for root::spv::RayFlagsMask {
            type Output = Self;
            #[inline]
            fn bitor(self, other: Self) -> Self {
                RayFlagsMask(self.0 | other.0)
            }
        }
        impl ::std::ops::BitOrAssign for root::spv::RayFlagsMask {
            #[inline]
            fn bitor_assign(&mut self, rhs: root::spv::RayFlagsMask) {
                self.0 |= rhs.0;
            }
        }
        impl ::std::ops::BitAnd<root::spv::RayFlagsMask> for root::spv::RayFlagsMask {
            type Output = Self;
            #[inline]
            fn bitand(self, other: Self) -> Self {
                RayFlagsMask(self.0 & other.0)
            }
        }
        impl ::std::ops::BitAndAssign for root::spv::RayFlagsMask {
            #[inline]
            fn bitand_assign(&mut self, rhs: root::spv::RayFlagsMask) {
                self.0 &= rhs.0;
            }
        }
        #[repr(transparent)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct RayFlagsMask(pub ::std::os::raw::c_uint);
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum RayQueryIntersection {
            RayQueryCandidateIntersectionKhr = 0,
            RayQueryCommittedIntersectionKhr = 1,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum RayQueryCommittedIntersectionType {
            RayQueryCommittedIntersectionNoneKhr = 0,
            RayQueryCommittedIntersectionTriangleKhr = 1,
            RayQueryCommittedIntersectionGeneratedKhr = 2,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum RayQueryCandidateIntersectionType {
            RayQueryCandidateIntersectionTriangleKhr = 0,
            RayQueryCandidateIntersectionAabbkhr = 1,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum FragmentShadingRateShift {
            FragmentShadingRateVertical2PixelsShift = 0,
            FragmentShadingRateVertical4PixelsShift = 1,
            FragmentShadingRateHorizontal2PixelsShift = 2,
            FragmentShadingRateHorizontal4PixelsShift = 3,
        }
        impl FragmentShadingRateMask {
            pub const None: root::spv::FragmentShadingRateMask =
                root::spv::FragmentShadingRateMask(0);
        }
        impl FragmentShadingRateMask {
            pub const FragmentShadingRateVertical2PixelsMask: root::spv::FragmentShadingRateMask =
                root::spv::FragmentShadingRateMask(1);
        }
        impl FragmentShadingRateMask {
            pub const FragmentShadingRateVertical4PixelsMask: root::spv::FragmentShadingRateMask =
                root::spv::FragmentShadingRateMask(2);
        }
        impl FragmentShadingRateMask {
            pub const FragmentShadingRateHorizontal2PixelsMask: root::spv::FragmentShadingRateMask =
                root::spv::FragmentShadingRateMask(4);
        }
        impl FragmentShadingRateMask {
            pub const FragmentShadingRateHorizontal4PixelsMask: root::spv::FragmentShadingRateMask =
                root::spv::FragmentShadingRateMask(8);
        }
        impl ::std::ops::BitOr<root::spv::FragmentShadingRateMask> for root::spv::FragmentShadingRateMask {
            type Output = Self;
            #[inline]
            fn bitor(self, other: Self) -> Self {
                FragmentShadingRateMask(self.0 | other.0)
            }
        }
        impl ::std::ops::BitOrAssign for root::spv::FragmentShadingRateMask {
            #[inline]
            fn bitor_assign(&mut self, rhs: root::spv::FragmentShadingRateMask) {
                self.0 |= rhs.0;
            }
        }
        impl ::std::ops::BitAnd<root::spv::FragmentShadingRateMask> for root::spv::FragmentShadingRateMask {
            type Output = Self;
            #[inline]
            fn bitand(self, other: Self) -> Self {
                FragmentShadingRateMask(self.0 & other.0)
            }
        }
        impl ::std::ops::BitAndAssign for root::spv::FragmentShadingRateMask {
            #[inline]
            fn bitand_assign(&mut self, rhs: root::spv::FragmentShadingRateMask) {
                self.0 &= rhs.0;
            }
        }
        #[repr(transparent)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct FragmentShadingRateMask(pub ::std::os::raw::c_uint);
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum FPDenormMode {
            Preserve = 0,
            FlushToZero = 1,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum FPOperationMode {
            Ieee = 0,
            Alt = 1,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum QuantizationModes {
            Trn = 0,
            TrnZero = 1,
            Rnd = 2,
            RndZero = 3,
            RndInf = 4,
            RndMinInf = 5,
            RndConv = 6,
            RndConvOdd = 7,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum OverflowModes {
            Wrap = 0,
            Sat = 1,
            SatZero = 2,
            SatSym = 3,
        }
        impl root::spv::PackedVectorFormat {
            pub const PackedVectorFormat4X8BitKhr: root::spv::PackedVectorFormat =
                PackedVectorFormat::PackedVectorFormat4X8Bit;
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum PackedVectorFormat {
            PackedVectorFormat4X8Bit = 0,
        }
        impl root::spv::Op {
            pub const SDotKhr: root::spv::Op = Op::SDot;
        }
        impl root::spv::Op {
            pub const UDotKhr: root::spv::Op = Op::UDot;
        }
        impl root::spv::Op {
            pub const SuDotKhr: root::spv::Op = Op::SuDot;
        }
        impl root::spv::Op {
            pub const SDotAccSatKhr: root::spv::Op = Op::SDotAccSat;
        }
        impl root::spv::Op {
            pub const UDotAccSatKhr: root::spv::Op = Op::UDotAccSat;
        }
        impl root::spv::Op {
            pub const SuDotAccSatKhr: root::spv::Op = Op::SuDotAccSat;
        }
        impl root::spv::Op {
            pub const ReportIntersectionNv: root::spv::Op = Op::ReportIntersectionKhr;
        }
        impl root::spv::Op {
            pub const TypeAccelerationStructureNv: root::spv::Op = Op::TypeAccelerationStructureKhr;
        }
        impl root::spv::Op {
            pub const DemoteToHelperInvocationExt: root::spv::Op = Op::DemoteToHelperInvocation;
        }
        impl root::spv::Op {
            pub const DecorateStringGoogle: root::spv::Op = Op::DecorateString;
        }
        impl root::spv::Op {
            pub const MemberDecorateStringGoogle: root::spv::Op = Op::MemberDecorateString;
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum Op {
            Nop = 0,
            Undef = 1,
            SourceContinued = 2,
            Source = 3,
            SourceExtension = 4,
            Name = 5,
            MemberName = 6,
            String = 7,
            Line = 8,
            Extension = 10,
            ExtInstImport = 11,
            ExtInst = 12,
            MemoryModel = 14,
            EntryPoint = 15,
            ExecutionMode = 16,
            Capability = 17,
            TypeVoid = 19,
            TypeBool = 20,
            TypeInt = 21,
            TypeFloat = 22,
            TypeVector = 23,
            TypeMatrix = 24,
            TypeImage = 25,
            TypeSampler = 26,
            TypeSampledImage = 27,
            TypeArray = 28,
            TypeRuntimeArray = 29,
            TypeStruct = 30,
            TypeOpaque = 31,
            TypePointer = 32,
            TypeFunction = 33,
            TypeEvent = 34,
            TypeDeviceEvent = 35,
            TypeReserveId = 36,
            TypeQueue = 37,
            TypePipe = 38,
            TypeForwardPointer = 39,
            ConstantTrue = 41,
            ConstantFalse = 42,
            Constant = 43,
            ConstantComposite = 44,
            ConstantSampler = 45,
            ConstantNull = 46,
            SpecConstantTrue = 48,
            SpecConstantFalse = 49,
            SpecConstant = 50,
            SpecConstantComposite = 51,
            SpecConstantOp = 52,
            Function = 54,
            FunctionParameter = 55,
            FunctionEnd = 56,
            FunctionCall = 57,
            Variable = 59,
            ImageTexelPointer = 60,
            Load = 61,
            Store = 62,
            CopyMemory = 63,
            CopyMemorySized = 64,
            AccessChain = 65,
            InBoundsAccessChain = 66,
            PtrAccessChain = 67,
            ArrayLength = 68,
            GenericPtrMemSemantics = 69,
            InBoundsPtrAccessChain = 70,
            Decorate = 71,
            MemberDecorate = 72,
            DecorationGroup = 73,
            GroupDecorate = 74,
            GroupMemberDecorate = 75,
            VectorExtractDynamic = 77,
            VectorInsertDynamic = 78,
            VectorShuffle = 79,
            CompositeConstruct = 80,
            CompositeExtract = 81,
            CompositeInsert = 82,
            CopyObject = 83,
            Transpose = 84,
            SampledImage = 86,
            ImageSampleImplicitLod = 87,
            ImageSampleExplicitLod = 88,
            ImageSampleDrefImplicitLod = 89,
            ImageSampleDrefExplicitLod = 90,
            ImageSampleProjImplicitLod = 91,
            ImageSampleProjExplicitLod = 92,
            ImageSampleProjDrefImplicitLod = 93,
            ImageSampleProjDrefExplicitLod = 94,
            ImageFetch = 95,
            ImageGather = 96,
            ImageDrefGather = 97,
            ImageRead = 98,
            ImageWrite = 99,
            Image = 100,
            ImageQueryFormat = 101,
            ImageQueryOrder = 102,
            ImageQuerySizeLod = 103,
            ImageQuerySize = 104,
            ImageQueryLod = 105,
            ImageQueryLevels = 106,
            ImageQuerySamples = 107,
            ConvertFToU = 109,
            ConvertFToS = 110,
            ConvertSToF = 111,
            ConvertUToF = 112,
            UConvert = 113,
            SConvert = 114,
            FConvert = 115,
            QuantizeToF16 = 116,
            ConvertPtrToU = 117,
            SatConvertSToU = 118,
            SatConvertUToS = 119,
            ConvertUToPtr = 120,
            PtrCastToGeneric = 121,
            GenericCastToPtr = 122,
            GenericCastToPtrExplicit = 123,
            Bitcast = 124,
            SNegate = 126,
            FNegate = 127,
            IAdd = 128,
            FAdd = 129,
            ISub = 130,
            FSub = 131,
            IMul = 132,
            FMul = 133,
            UDiv = 134,
            SDiv = 135,
            FDiv = 136,
            UMod = 137,
            SRem = 138,
            SMod = 139,
            FRem = 140,
            FMod = 141,
            VectorTimesScalar = 142,
            MatrixTimesScalar = 143,
            VectorTimesMatrix = 144,
            MatrixTimesVector = 145,
            MatrixTimesMatrix = 146,
            OuterProduct = 147,
            Dot = 148,
            IAddCarry = 149,
            ISubBorrow = 150,
            UMulExtended = 151,
            SMulExtended = 152,
            Any = 154,
            All = 155,
            IsNan = 156,
            IsInf = 157,
            IsFinite = 158,
            IsNormal = 159,
            SignBitSet = 160,
            LessOrGreater = 161,
            Ordered = 162,
            Unordered = 163,
            LogicalEqual = 164,
            LogicalNotEqual = 165,
            LogicalOr = 166,
            LogicalAnd = 167,
            LogicalNot = 168,
            Select = 169,
            IEqual = 170,
            INotEqual = 171,
            UGreaterThan = 172,
            SGreaterThan = 173,
            UGreaterThanEqual = 174,
            SGreaterThanEqual = 175,
            ULessThan = 176,
            SLessThan = 177,
            ULessThanEqual = 178,
            SLessThanEqual = 179,
            FOrdEqual = 180,
            FUnordEqual = 181,
            FOrdNotEqual = 182,
            FUnordNotEqual = 183,
            FOrdLessThan = 184,
            FUnordLessThan = 185,
            FOrdGreaterThan = 186,
            FUnordGreaterThan = 187,
            FOrdLessThanEqual = 188,
            FUnordLessThanEqual = 189,
            FOrdGreaterThanEqual = 190,
            FUnordGreaterThanEqual = 191,
            ShiftRightLogical = 194,
            ShiftRightArithmetic = 195,
            ShiftLeftLogical = 196,
            BitwiseOr = 197,
            BitwiseXor = 198,
            BitwiseAnd = 199,
            Not = 200,
            BitFieldInsert = 201,
            BitFieldSExtract = 202,
            BitFieldUExtract = 203,
            BitReverse = 204,
            BitCount = 205,
            DPdx = 207,
            DPdy = 208,
            Fwidth = 209,
            DPdxFine = 210,
            DPdyFine = 211,
            FwidthFine = 212,
            DPdxCoarse = 213,
            DPdyCoarse = 214,
            FwidthCoarse = 215,
            EmitVertex = 218,
            EndPrimitive = 219,
            EmitStreamVertex = 220,
            EndStreamPrimitive = 221,
            ControlBarrier = 224,
            MemoryBarrier = 225,
            AtomicLoad = 227,
            AtomicStore = 228,
            AtomicExchange = 229,
            AtomicCompareExchange = 230,
            AtomicCompareExchangeWeak = 231,
            AtomicIIncrement = 232,
            AtomicIDecrement = 233,
            AtomicIAdd = 234,
            AtomicISub = 235,
            AtomicSMin = 236,
            AtomicUMin = 237,
            AtomicAnd = 240,
            AtomicOr = 241,
            AtomicXor = 242,
            Phi = 245,
            LoopMerge = 246,
            SelectionMerge = 247,
            Label = 248,
            Branch = 249,
            BranchConditional = 250,
            Switch = 251,
            Kill = 252,
            Return = 253,
            ReturnValue = 254,
            Unreachable = 255,
            LifetimeStart = 256,
            LifetimeStop = 257,
            GroupAsyncCopy = 259,
            GroupWaitEvents = 260,
            GroupAll = 261,
            GroupAny = 262,
            GroupBroadcast = 263,
            GroupIAdd = 264,
            GroupFAdd = 265,
            GroupFMin = 266,
            GroupUMin = 267,
            GroupSMin = 268,
            ReadPipe = 274,
            WritePipe = 275,
            ReservedReadPipe = 276,
            ReservedWritePipe = 277,
            ReserveReadPipePackets = 278,
            ReserveWritePipePackets = 279,
            CommitReadPipe = 280,
            CommitWritePipe = 281,
            IsValidReserveId = 282,
            GetNumPipePackets = 283,
            GetMaxPipePackets = 284,
            GroupReserveReadPipePackets = 285,
            GroupReserveWritePipePackets = 286,
            GroupCommitReadPipe = 287,
            GroupCommitWritePipe = 288,
            EnqueueMarker = 291,
            EnqueueKernel = 292,
            GetKernelNDrangeSubGroupCount = 293,
            GetKernelNDrangeMaxSubGroupSize = 294,
            GetKernelWorkGroupSize = 295,
            GetKernelPreferredWorkGroupSizeMultiple = 296,
            RetainEvent = 297,
            ReleaseEvent = 298,
            CreateUserEvent = 299,
            IsValidEvent = 300,
            SetUserEventStatus = 301,
            CaptureEventProfilingInfo = 302,
            GetDefaultQueue = 303,
            BuildNdRange = 304,
            ImageSparseSampleImplicitLod = 305,
            ImageSparseSampleExplicitLod = 306,
            ImageSparseSampleDrefImplicitLod = 307,
            ImageSparseSampleDrefExplicitLod = 308,
            ImageSparseSampleProjImplicitLod = 309,
            ImageSparseSampleProjExplicitLod = 310,
            ImageSparseSampleProjDrefImplicitLod = 311,
            ImageSparseSampleProjDrefExplicitLod = 312,
            ImageSparseFetch = 313,
            ImageSparseGather = 314,
            ImageSparseDrefGather = 315,
            ImageSparseTexelsResident = 316,
            NoLine = 317,
            AtomicFlagTestAndSet = 318,
            AtomicFlagClear = 319,
            ImageSparseRead = 320,
            SizeOf = 321,
            TypePipeStorage = 322,
            ConstantPipeStorage = 323,
            CreatePipeFromPipeStorage = 324,
            GetKernelLocalSizeForSubgroupCount = 325,
            GetKernelMaxNumSubgroups = 326,
            TypeNamedBarrier = 327,
            NamedBarrierInitialize = 328,
            MemoryNamedBarrier = 329,
            ModuleProcessed = 330,
            ExecutionModeId = 331,
            DecorateId = 332,
            GroupNonUniformElect = 333,
            GroupNonUniformAll = 334,
            GroupNonUniformAny = 335,
            GroupNonUniformAllEqual = 336,
            GroupNonUniformBroadcast = 337,
            GroupNonUniformBroadcastFirst = 338,
            GroupNonUniformBallot = 339,
            GroupNonUniformInverseBallot = 340,
            GroupNonUniformBallotBitExtract = 341,
            GroupNonUniformBallotBitCount = 342,
            GroupNonUniformBallotFindLsb = 343,
            GroupNonUniformBallotFindMsb = 344,
            GroupNonUniformShuffle = 345,
            GroupNonUniformShuffleXor = 346,
            GroupNonUniformShuffleUp = 347,
            GroupNonUniformShuffleDown = 348,
            GroupNonUniformIAdd = 349,
            GroupNonUniformFAdd = 350,
            GroupNonUniformIMul = 351,
            GroupNonUniformFMul = 352,
            GroupNonUniformSMin = 353,
            GroupNonUniformUMin = 354,
            GroupNonUniformFMin = 355,
            GroupNonUniformBitwiseAnd = 359,
            GroupNonUniformBitwiseOr = 360,
            GroupNonUniformBitwiseXor = 361,
            GroupNonUniformLogicalAnd = 362,
            GroupNonUniformLogicalOr = 363,
            GroupNonUniformLogicalXor = 364,
            GroupNonUniformQuadBroadcast = 365,
            GroupNonUniformQuadSwap = 366,
            CopyLogical = 400,
            PtrEqual = 401,
            PtrNotEqual = 402,
            PtrDiff = 403,
            TerminateInvocation = 4416,
            SubgroupBallotKhr = 4421,
            SubgroupFirstInvocationKhr = 4422,
            SubgroupAllKhr = 4428,
            SubgroupAnyKhr = 4429,
            SubgroupAllEqualKhr = 4430,
            GroupNonUniformRotateKhr = 4431,
            SubgroupReadInvocationKhr = 4432,
            TraceRayKhr = 4445,
            ExecuteCallableKhr = 4446,
            ConvertUToAccelerationStructureKhr = 4447,
            IgnoreIntersectionKhr = 4448,
            TerminateRayKhr = 4449,
            SDot = 4450,
            UDot = 4451,
            SuDot = 4452,
            SDotAccSat = 4453,
            UDotAccSat = 4454,
            SuDotAccSat = 4455,
            TypeRayQueryKhr = 4472,
            RayQueryInitializeKhr = 4473,
            RayQueryTerminateKhr = 4474,
            RayQueryGenerateIntersectionKhr = 4475,
            RayQueryConfirmIntersectionKhr = 4476,
            RayQueryProceedKhr = 4477,
            RayQueryGetIntersectionTypeKhr = 4479,
            GroupIAddNonUniformAmd = 5000,
            GroupFAddNonUniformAmd = 5001,
            GroupFMinNonUniformAmd = 5002,
            GroupUMinNonUniformAmd = 5003,
            GroupSMinNonUniformAmd = 5004,
            GroupFMaxNonUniformAmd = 5005,
            GroupUMaxNonUniformAmd = 5006,
            GroupSMaxNonUniformAmd = 5007,
            FragmentMaskFetchAmd = 5011,
            FragmentFetchAmd = 5012,
            ReadClockKhr = 5056,
            ImageSampleFootprintNv = 5283,
            EmitMeshTasksExt = 5294,
            SetMeshOutputsExt = 5295,
            GroupNonUniformPartitionNv = 5296,
            WritePackedPrimitiveIndices4X8Nv = 5299,
            ReportIntersectionKhr = 5334,
            IgnoreIntersectionNv = 5335,
            TerminateRayNv = 5336,
            TraceNv = 5337,
            TraceMotionNv = 5338,
            TraceRayMotionNv = 5339,
            TypeAccelerationStructureKhr = 5341,
            ExecuteCallableNv = 5344,
            TypeCooperativeMatrixNv = 5358,
            CooperativeMatrixLoadNv = 5359,
            CooperativeMatrixStoreNv = 5360,
            CooperativeMatrixMulAddNv = 5361,
            CooperativeMatrixLengthNv = 5362,
            BeginInvocationInterlockExt = 5364,
            EndInvocationInterlockExt = 5365,
            DemoteToHelperInvocation = 5380,
            IsHelperInvocationExt = 5381,
            ConvertUToImageNv = 5391,
            ConvertUToSamplerNv = 5392,
            ConvertImageToUnv = 5393,
            ConvertSamplerToUnv = 5394,
            ConvertUToSampledImageNv = 5395,
            ConvertSampledImageToUnv = 5396,
            SamplerImageAddressingModeNv = 5397,
            SubgroupShuffleIntel = 5571,
            SubgroupShuffleDownIntel = 5572,
            SubgroupShuffleUpIntel = 5573,
            SubgroupShuffleXorIntel = 5574,
            SubgroupBlockReadIntel = 5575,
            SubgroupBlockWriteIntel = 5576,
            SubgroupImageBlockReadIntel = 5577,
            SubgroupImageBlockWriteIntel = 5578,
            SubgroupImageMediaBlockReadIntel = 5580,
            SubgroupImageMediaBlockWriteIntel = 5581,
            UCountLeadingZerosIntel = 5585,
            UCountTrailingZerosIntel = 5586,
            AbsISubIntel = 5587,
            AbsUSubIntel = 5588,
            IAddSatIntel = 5589,
            UAddSatIntel = 5590,
            IAverageIntel = 5591,
            UAverageIntel = 5592,
            IAverageRoundedIntel = 5593,
            UAverageRoundedIntel = 5594,
            ISubSatIntel = 5595,
            USubSatIntel = 5596,
            IMul32X16intel = 5597,
            UMul32X16intel = 5598,
            ConstantFunctionPointerIntel = 5600,
            FunctionPointerCallIntel = 5601,
            AsmTargetIntel = 5609,
            AsmIntel = 5610,
            AsmCallIntel = 5611,
            AtomicFMinExt = 5614,
            AtomicFMaxExt = 5615,
            AssumeTrueKhr = 5630,
            ExpectKhr = 5631,
            DecorateString = 5632,
            MemberDecorateString = 5633,
            VmeImageIntel = 5699,
            TypeVmeImageIntel = 5700,
            TypeAvcImePayloadIntel = 5701,
            TypeAvcRefPayloadIntel = 5702,
            TypeAvcSicPayloadIntel = 5703,
            TypeAvcMcePayloadIntel = 5704,
            TypeAvcMceResultIntel = 5705,
            TypeAvcImeResultIntel = 5706,
            TypeAvcImeResultSingleReferenceStreamoutIntel = 5707,
            TypeAvcImeResultDualReferenceStreamoutIntel = 5708,
            TypeAvcImeSingleReferenceStreaminIntel = 5709,
            TypeAvcImeDualReferenceStreaminIntel = 5710,
            TypeAvcRefResultIntel = 5711,
            TypeAvcSicResultIntel = 5712,
            SubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyIntel = 5713,
            SubgroupAvcMceSetInterBaseMultiReferencePenaltyIntel = 5714,
            SubgroupAvcMceGetDefaultInterShapePenaltyIntel = 5715,
            SubgroupAvcMceSetInterShapePenaltyIntel = 5716,
            SubgroupAvcMceGetDefaultInterDirectionPenaltyIntel = 5717,
            SubgroupAvcMceSetInterDirectionPenaltyIntel = 5718,
            SubgroupAvcMceGetDefaultIntraLumaShapePenaltyIntel = 5719,
            SubgroupAvcMceGetDefaultInterMotionVectorCostTableIntel = 5720,
            SubgroupAvcMceGetDefaultHighPenaltyCostTableIntel = 5721,
            SubgroupAvcMceGetDefaultMediumPenaltyCostTableIntel = 5722,
            SubgroupAvcMceGetDefaultLowPenaltyCostTableIntel = 5723,
            SubgroupAvcMceSetMotionVectorCostFunctionIntel = 5724,
            SubgroupAvcMceGetDefaultIntraLumaModePenaltyIntel = 5725,
            SubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyIntel = 5726,
            SubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyIntel = 5727,
            SubgroupAvcMceSetAcOnlyHaarIntel = 5728,
            SubgroupAvcMceSetSourceInterlacedFieldPolarityIntel = 5729,
            SubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityIntel = 5730,
            SubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesIntel = 5731,
            SubgroupAvcMceConvertToImePayloadIntel = 5732,
            SubgroupAvcMceConvertToImeResultIntel = 5733,
            SubgroupAvcMceConvertToRefPayloadIntel = 5734,
            SubgroupAvcMceConvertToRefResultIntel = 5735,
            SubgroupAvcMceConvertToSicPayloadIntel = 5736,
            SubgroupAvcMceConvertToSicResultIntel = 5737,
            SubgroupAvcMceGetMotionVectorsIntel = 5738,
            SubgroupAvcMceGetInterDistortionsIntel = 5739,
            SubgroupAvcMceGetBestInterDistortionsIntel = 5740,
            SubgroupAvcMceGetInterMajorShapeIntel = 5741,
            SubgroupAvcMceGetInterMinorShapeIntel = 5742,
            SubgroupAvcMceGetInterDirectionsIntel = 5743,
            SubgroupAvcMceGetInterMotionVectorCountIntel = 5744,
            SubgroupAvcMceGetInterReferenceIdsIntel = 5745,
            SubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesIntel = 5746,
            SubgroupAvcImeInitializeIntel = 5747,
            SubgroupAvcImeSetSingleReferenceIntel = 5748,
            SubgroupAvcImeSetDualReferenceIntel = 5749,
            SubgroupAvcImeRefWindowSizeIntel = 5750,
            SubgroupAvcImeAdjustRefOffsetIntel = 5751,
            SubgroupAvcImeConvertToMcePayloadIntel = 5752,
            SubgroupAvcImeSetMaxMotionVectorCountIntel = 5753,
            SubgroupAvcImeSetUnidirectionalMixDisableIntel = 5754,
            SubgroupAvcImeSetEarlySearchTerminationThresholdIntel = 5755,
            SubgroupAvcImeSetWeightedSadIntel = 5756,
            SubgroupAvcImeEvaluateWithSingleReferenceIntel = 5757,
            SubgroupAvcImeEvaluateWithDualReferenceIntel = 5758,
            SubgroupAvcImeEvaluateWithSingleReferenceStreaminIntel = 5759,
            SubgroupAvcImeEvaluateWithDualReferenceStreaminIntel = 5760,
            SubgroupAvcImeEvaluateWithSingleReferenceStreamoutIntel = 5761,
            SubgroupAvcImeEvaluateWithDualReferenceStreamoutIntel = 5762,
            SubgroupAvcImeEvaluateWithSingleReferenceStreaminoutIntel = 5763,
            SubgroupAvcImeEvaluateWithDualReferenceStreaminoutIntel = 5764,
            SubgroupAvcImeConvertToMceResultIntel = 5765,
            SubgroupAvcImeGetSingleReferenceStreaminIntel = 5766,
            SubgroupAvcImeGetDualReferenceStreaminIntel = 5767,
            SubgroupAvcImeStripSingleReferenceStreamoutIntel = 5768,
            SubgroupAvcImeStripDualReferenceStreamoutIntel = 5769,
            SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsIntel = 5770,
            SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsIntel = 5771,
            SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsIntel = 5772,
            SubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsIntel = 5773,
            SubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsIntel = 5774,
            SubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsIntel = 5775,
            SubgroupAvcImeGetBorderReachedIntel = 5776,
            SubgroupAvcImeGetTruncatedSearchIndicationIntel = 5777,
            SubgroupAvcImeGetUnidirectionalEarlySearchTerminationIntel = 5778,
            SubgroupAvcImeGetWeightingPatternMinimumMotionVectorIntel = 5779,
            SubgroupAvcImeGetWeightingPatternMinimumDistortionIntel = 5780,
            SubgroupAvcFmeInitializeIntel = 5781,
            SubgroupAvcBmeInitializeIntel = 5782,
            SubgroupAvcRefConvertToMcePayloadIntel = 5783,
            SubgroupAvcRefSetBidirectionalMixDisableIntel = 5784,
            SubgroupAvcRefSetBilinearFilterEnableIntel = 5785,
            SubgroupAvcRefEvaluateWithSingleReferenceIntel = 5786,
            SubgroupAvcRefEvaluateWithDualReferenceIntel = 5787,
            SubgroupAvcRefEvaluateWithMultiReferenceIntel = 5788,
            SubgroupAvcRefEvaluateWithMultiReferenceInterlacedIntel = 5789,
            SubgroupAvcRefConvertToMceResultIntel = 5790,
            SubgroupAvcSicInitializeIntel = 5791,
            SubgroupAvcSicConfigureSkcIntel = 5792,
            SubgroupAvcSicConfigureIpeLumaIntel = 5793,
            SubgroupAvcSicConfigureIpeLumaChromaIntel = 5794,
            SubgroupAvcSicGetMotionVectorMaskIntel = 5795,
            SubgroupAvcSicConvertToMcePayloadIntel = 5796,
            SubgroupAvcSicSetIntraLumaShapePenaltyIntel = 5797,
            SubgroupAvcSicSetIntraLumaModeCostFunctionIntel = 5798,
            SubgroupAvcSicSetIntraChromaModeCostFunctionIntel = 5799,
            SubgroupAvcSicSetBilinearFilterEnableIntel = 5800,
            SubgroupAvcSicSetSkcForwardTransformEnableIntel = 5801,
            SubgroupAvcSicSetBlockBasedRawSkipSadIntel = 5802,
            SubgroupAvcSicEvaluateIpeIntel = 5803,
            SubgroupAvcSicEvaluateWithSingleReferenceIntel = 5804,
            SubgroupAvcSicEvaluateWithDualReferenceIntel = 5805,
            SubgroupAvcSicEvaluateWithMultiReferenceIntel = 5806,
            SubgroupAvcSicEvaluateWithMultiReferenceInterlacedIntel = 5807,
            SubgroupAvcSicConvertToMceResultIntel = 5808,
            SubgroupAvcSicGetIpeLumaShapeIntel = 5809,
            SubgroupAvcSicGetBestIpeLumaDistortionIntel = 5810,
            SubgroupAvcSicGetBestIpeChromaDistortionIntel = 5811,
            SubgroupAvcSicGetPackedIpeLumaModesIntel = 5812,
            SubgroupAvcSicGetIpeChromaModeIntel = 5813,
            SubgroupAvcSicGetPackedSkcLumaCountThresholdIntel = 5814,
            SubgroupAvcSicGetPackedSkcLumaSumThresholdIntel = 5815,
            SubgroupAvcSicGetInterRawSadsIntel = 5816,
            VariableLengthArrayIntel = 5818,
            SaveMemoryIntel = 5819,
            RestoreMemoryIntel = 5820,
            ArbitraryFloatSinCosPiIntel = 5840,
            ArbitraryFloatCastIntel = 5841,
            ArbitraryFloatCastFromIntIntel = 5842,
            ArbitraryFloatCastToIntIntel = 5843,
            ArbitraryFloatAddIntel = 5846,
            ArbitraryFloatSubIntel = 5847,
            ArbitraryFloatMulIntel = 5848,
            ArbitraryFloatDivIntel = 5849,
            ArbitraryFloatGtintel = 5850,
            ArbitraryFloatGeintel = 5851,
            ArbitraryFloatLtintel = 5852,
            ArbitraryFloatLeintel = 5853,
            ArbitraryFloatEqintel = 5854,
            ArbitraryFloatRecipIntel = 5855,
            ArbitraryFloatRSqrtIntel = 5856,
            ArbitraryFloatCbrtIntel = 5857,
            ArbitraryFloatHypotIntel = 5858,
            ArbitraryFloatSqrtIntel = 5859,
            ArbitraryFloatLogIntel = 5860,
            ArbitraryFloatLog2intel = 5861,
            ArbitraryFloatLog10intel = 5862,
            ArbitraryFloatLog1PIntel = 5863,
            ArbitraryFloatExpIntel = 5864,
            ArbitraryFloatExp2intel = 5865,
            ArbitraryFloatExp10intel = 5866,
            ArbitraryFloatExpm1intel = 5867,
            ArbitraryFloatSinIntel = 5868,
            ArbitraryFloatCosIntel = 5869,
            ArbitraryFloatSinCosIntel = 5870,
            ArbitraryFloatSinPiIntel = 5871,
            ArbitraryFloatCosPiIntel = 5872,
            ArbitraryFloatASinIntel = 5873,
            ArbitraryFloatASinPiIntel = 5874,
            ArbitraryFloatACosIntel = 5875,
            ArbitraryFloatACosPiIntel = 5876,
            ArbitraryFloatATanIntel = 5877,
            ArbitraryFloatATanPiIntel = 5878,
            ArbitraryFloatATan2intel = 5879,
            ArbitraryFloatPowIntel = 5880,
            ArbitraryFloatPowRintel = 5881,
            ArbitraryFloatPowNintel = 5882,
            LoopControlIntel = 5887,
            AliasDomainDeclIntel = 5911,
            AliasScopeDeclIntel = 5912,
            AliasScopeListDeclIntel = 5913,
            FixedSqrtIntel = 5923,
            FixedRecipIntel = 5924,
            FixedRsqrtIntel = 5925,
            FixedSinIntel = 5926,
            FixedCosIntel = 5927,
            FixedSinCosIntel = 5928,
            FixedSinPiIntel = 5929,
            FixedCosPiIntel = 5930,
            FixedSinCosPiIntel = 5931,
            FixedLogIntel = 5932,
            FixedExpIntel = 5933,
            PtrCastToCrossWorkgroupIntel = 5934,
            CrossWorkgroupCastToPtrIntel = 5938,
            ReadPipeBlockingIntel = 5946,
            WritePipeBlockingIntel = 5947,
            FpgaRegIntel = 5949,
            RayQueryGetRayTMinKhr = 6016,
            RayQueryGetRayFlagsKhr = 6017,
            RayQueryGetIntersectionTkhr = 6018,
            RayQueryGetIntersectionInstanceCustomIndexKhr = 6019,
            RayQueryGetIntersectionInstanceIdKhr = 6020,
            RayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKhr = 6021,
            RayQueryGetIntersectionGeometryIndexKhr = 6022,
            RayQueryGetIntersectionPrimitiveIndexKhr = 6023,
            RayQueryGetIntersectionBarycentricsKhr = 6024,
            RayQueryGetIntersectionFrontFaceKhr = 6025,
            RayQueryGetIntersectionCandidateAabbOpaqueKhr = 6026,
            RayQueryGetIntersectionObjectRayDirectionKhr = 6027,
            RayQueryGetIntersectionObjectRayOriginKhr = 6028,
            RayQueryGetWorldRayDirectionKhr = 6029,
            RayQueryGetWorldRayOriginKhr = 6030,
            RayQueryGetIntersectionObjectToWorldKhr = 6031,
            RayQueryGetIntersectionWorldToObjectKhr = 6032,
            AtomicFAddExt = 6035,
            TypeBufferSurfaceIntel = 6086,
            TypeStructContinuedIntel = 6090,
            ConstantCompositeContinuedIntel = 6091,
            SpecConstantCompositeContinuedIntel = 6092,
            ControlBarrierArriveIntel = 6142,
            ControlBarrierWaitIntel = 6143,
            GroupIMulKhr = 6401,
            GroupFMulKhr = 6402,
            GroupBitwiseAndKhr = 6403,
            GroupBitwiseOrKhr = 6404,
            GroupBitwiseXorKhr = 6405,
            GroupLogicalAndKhr = 6406,
            GroupLogicalOrKhr = 6407,
            GroupLogicalXorKhr = 6408,
        }
    }
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod __fs {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
    }
    pub mod spirv_cross {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type TypeID = u32;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum SPIRType_BaseType {
            Unknown = 0,
            Void = 1,
            Boolean = 2,
            SByte = 3,
            UByte = 4,
            Short = 5,
            UShort = 6,
            Int = 7,
            UInt = 8,
            Int64 = 9,
            UInt64 = 10,
            AtomicCounter = 11,
            Half = 12,
            Float = 13,
            Double = 14,
            Struct = 15,
            Image = 16,
            SampledImage = 17,
            Sampler = 18,
            AccelerationStructure = 19,
            RayQuery = 20,
            ControlPointArray = 21,
            Interpolant = 22,
            Char = 23,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
        pub struct SPIRType_ImageType {
            pub type_: root::spirv_cross::TypeID,
            pub dim: root::spv::Dim,
            pub depth: bool,
            pub arrayed: bool,
            pub ms: bool,
            pub sampled: u32,
            pub format: root::spv::ImageFormat,
            pub access: root::spv::AccessQualifier,
        }
        impl root::spirv_cross::MSLShaderVariableFormat {
            pub const MSL_VERTEX_FORMAT_OTHER: root::spirv_cross::MSLShaderVariableFormat =
                MSLShaderVariableFormat::Other;
        }
        impl root::spirv_cross::MSLShaderVariableFormat {
            pub const MSL_VERTEX_FORMAT_UINT8: root::spirv_cross::MSLShaderVariableFormat =
                MSLShaderVariableFormat::Uint8;
        }
        impl root::spirv_cross::MSLShaderVariableFormat {
            pub const MSL_VERTEX_FORMAT_UINT16: root::spirv_cross::MSLShaderVariableFormat =
                MSLShaderVariableFormat::Uint16;
        }
        impl root::spirv_cross::MSLShaderVariableFormat {
            pub const MSL_SHADER_INPUT_FORMAT_OTHER: root::spirv_cross::MSLShaderVariableFormat =
                MSLShaderVariableFormat::Other;
        }
        impl root::spirv_cross::MSLShaderVariableFormat {
            pub const MSL_SHADER_INPUT_FORMAT_UINT8: root::spirv_cross::MSLShaderVariableFormat =
                MSLShaderVariableFormat::Uint8;
        }
        impl root::spirv_cross::MSLShaderVariableFormat {
            pub const MSL_SHADER_INPUT_FORMAT_UINT16: root::spirv_cross::MSLShaderVariableFormat =
                MSLShaderVariableFormat::Uint16;
        }
        impl root::spirv_cross::MSLShaderVariableFormat {
            pub const MSL_SHADER_INPUT_FORMAT_ANY16: root::spirv_cross::MSLShaderVariableFormat =
                MSLShaderVariableFormat::Any16;
        }
        impl root::spirv_cross::MSLShaderVariableFormat {
            pub const MSL_SHADER_INPUT_FORMAT_ANY32: root::spirv_cross::MSLShaderVariableFormat =
                MSLShaderVariableFormat::Any32;
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum MSLShaderVariableFormat {
            Other = 0,
            Uint8 = 1,
            Uint16 = 2,
            Any16 = 3,
            Any32 = 4,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum MSLShaderVariableRate {
            PerVertex = 0,
            PerPrimitive = 1,
            PerPatch = 2,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
        pub struct MSLShaderInterfaceVariable {
            pub location: u32,
            pub component: u32,
            pub format: root::spirv_cross::MSLShaderVariableFormat,
            pub builtin: root::spv::BuiltIn,
            pub vecsize: u32,
            pub rate: root::spirv_cross::MSLShaderVariableRate,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
        pub struct MSLResourceBinding {
            pub stage: root::spv::ExecutionModel,
            pub basetype: root::spirv_cross::SPIRType_BaseType,
            pub desc_set: u32,
            pub binding: u32,
            pub count: u32,
            pub msl_buffer: u32,
            pub msl_texture: u32,
            pub msl_sampler: u32,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum MSLSamplerCoord {
            Normalized = 0,
            Pixel = 1,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum MSLSamplerFilter {
            Nearest = 0,
            Linear = 1,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum MSLSamplerMipFilter {
            None = 0,
            Nearest = 1,
            Linear = 2,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum MSLSamplerAddress {
            ClampToZero = 0,
            ClampToEdge = 1,
            ClampToBorder = 2,
            Repeat = 3,
            MirroredRepeat = 4,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum MSLSamplerCompareFunc {
            Never = 0,
            Less = 1,
            LessEqual = 2,
            Greater = 3,
            GreaterEqual = 4,
            Equal = 5,
            NotEqual = 6,
            Always = 7,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum MSLSamplerBorderColor {
            TransparentBlack = 0,
            OpaqueBlack = 1,
            OpaqueWhite = 2,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum MSLFormatResolution {
            MSL_FORMAT_RESOLUTION_444 = 0,
            MSL_FORMAT_RESOLUTION_422 = 1,
            MSL_FORMAT_RESOLUTION_420 = 2,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum MSLChromaLocation {
            CositedEven = 0,
            Midpoint = 1,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum MSLComponentSwizzle {
            Identity = 0,
            Zero = 1,
            One = 2,
            R = 3,
            G = 4,
            B = 5,
            A = 6,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum MSLSamplerYCbCrModelConversion {
            MSL_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
            MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
            MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_709 = 2,
            MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_601 = 3,
            MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_2020 = 4,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub enum MSLSamplerYCbCrRange {
            MSL_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
            MSL_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
        pub struct MSLConstexprSampler {
            pub coord: root::spirv_cross::MSLSamplerCoord,
            pub min_filter: root::spirv_cross::MSLSamplerFilter,
            pub mag_filter: root::spirv_cross::MSLSamplerFilter,
            pub mip_filter: root::spirv_cross::MSLSamplerMipFilter,
            pub s_address: root::spirv_cross::MSLSamplerAddress,
            pub t_address: root::spirv_cross::MSLSamplerAddress,
            pub r_address: root::spirv_cross::MSLSamplerAddress,
            pub compare_func: root::spirv_cross::MSLSamplerCompareFunc,
            pub border_color: root::spirv_cross::MSLSamplerBorderColor,
            pub lod_clamp_min: f32,
            pub lod_clamp_max: f32,
            pub max_anisotropy: ::std::os::raw::c_int,
            pub planes: u32,
            pub resolution: root::spirv_cross::MSLFormatResolution,
            pub chroma_filter: root::spirv_cross::MSLSamplerFilter,
            pub x_chroma_offset: root::spirv_cross::MSLChromaLocation,
            pub y_chroma_offset: root::spirv_cross::MSLChromaLocation,
            pub swizzle: [root::spirv_cross::MSLComponentSwizzle; 4usize],
            pub ycbcr_model: root::spirv_cross::MSLSamplerYCbCrModelConversion,
            pub ycbcr_range: root::spirv_cross::MSLSamplerYCbCrRange,
            pub bpc: u32,
            pub compare_enable: bool,
            pub lod_clamp_enable: bool,
            pub anisotropy_enable: bool,
            pub ycbcr_conversion_enable: bool,
        }
    }
    pub type ScInternalCompilerBase = ::std::os::raw::c_void;
    pub type ScInternalCompilerHlsl = ::std::os::raw::c_void;
    pub type ScInternalCompilerMsl = ::std::os::raw::c_void;
    pub type ScInternalCompilerGlsl = ::std::os::raw::c_void;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum ScInternalResult {
        Success = 0,
        Unhandled = 1,
        CompilationError = 2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ScEntryPoint {
        pub name: *mut ::std::os::raw::c_char,
        pub execution_model: root::spv::ExecutionModel,
        pub work_group_size_x: u32,
        pub work_group_size_y: u32,
        pub work_group_size_z: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ScBufferRange {
        pub index: ::std::os::raw::c_uint,
        pub offset: usize,
        pub range: usize,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ScCombinedImageSampler {
        pub combined_id: u32,
        pub image_id: u32,
        pub sampler_id: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ScHlslRootConstant {
        pub start: u32,
        pub end: u32,
        pub binding: u32,
        pub space: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ScHlslCompilerOptions {
        pub shader_model: i32,
        pub point_size_compat: bool,
        pub point_coord_compat: bool,
        pub vertex_transform_clip_space: bool,
        pub vertex_invert_y: bool,
        pub force_storage_buffer_as_uav: bool,
        pub nonwritable_uav_texture_as_srv: bool,
        pub force_zero_initialized_variables: bool,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ScMslCompilerOptions {
        pub vertex_transform_clip_space: bool,
        pub vertex_invert_y: bool,
        pub platform: u8,
        pub version: u32,
        pub enable_point_size_builtin: bool,
        pub disable_rasterization: bool,
        pub swizzle_buffer_index: u32,
        pub indirect_params_buffer_index: u32,
        pub shader_output_buffer_index: u32,
        pub shader_patch_output_buffer_index: u32,
        pub shader_tess_factor_buffer_index: u32,
        pub buffer_size_buffer_index: u32,
        pub capture_output_to_buffer: bool,
        pub swizzle_texture_samples: bool,
        pub tess_domain_origin_lower_left: bool,
        pub argument_buffers: bool,
        pub pad_fragment_output_components: bool,
        pub force_native_arrays: bool,
        pub force_zero_initialized_variables: bool,
        pub force_active_argument_buffer_resources: bool,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ScGlslCompilerOptions {
        pub vertex_transform_clip_space: bool,
        pub vertex_invert_y: bool,
        pub vertex_support_nonzero_base_instance: bool,
        pub fragment_default_float_precision: u8,
        pub fragment_default_int_precision: u8,
        pub version: u32,
        pub es: bool,
        pub force_temporary: bool,
        pub vulkan_semantics: bool,
        pub separate_shader_objects: bool,
        pub flatten_multidimensional_arrays: bool,
        pub enable_420_pack_extension: bool,
        pub emit_push_constant_as_uniform_buffer: bool,
        pub emit_uniform_buffer_as_plain_uniforms: bool,
        pub emit_line_directives: bool,
        pub enable_storage_image_qualifier_deduction: bool,
        pub force_zero_initialized_variables: bool,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ScResource {
        pub id: u32,
        pub type_id: u32,
        pub base_type_id: u32,
        pub name: *mut ::std::os::raw::c_char,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ScResourceArray {
        pub data: *mut root::ScResource,
        pub num: usize,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ScBuiltInResource {
        pub builtin: root::spv::BuiltIn,
        pub value_type_id: u32,
        pub resource: root::ScResource,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ScBuiltInResourceArray {
        pub data: *mut root::ScBuiltInResource,
        pub num: usize,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ScShaderResources {
        pub uniform_buffers: root::ScResourceArray,
        pub storage_buffers: root::ScResourceArray,
        pub stage_inputs: root::ScResourceArray,
        pub stage_outputs: root::ScResourceArray,
        pub subpass_inputs: root::ScResourceArray,
        pub storage_images: root::ScResourceArray,
        pub sampled_images: root::ScResourceArray,
        pub atomic_counters: root::ScResourceArray,
        pub acceleration_structures: root::ScResourceArray,
        pub push_constant_buffers: root::ScResourceArray,
        pub shader_record_buffers: root::ScResourceArray,
        pub separate_images: root::ScResourceArray,
        pub separate_samplers: root::ScResourceArray,
        pub builtin_inputs: root::ScBuiltInResourceArray,
        pub builtin_outputs: root::ScBuiltInResourceArray,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ScSpecializationConstant {
        pub id: u32,
        pub constant_id: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ScType {
        pub type_: root::spirv_cross::SPIRType_BaseType,
        pub width: u32,
        pub vecsize: u32,
        pub columns: u32,
        pub member_types: *mut u32,
        pub member_types_size: usize,
        pub array: *mut u32,
        pub array_size_literal: *mut bool,
        pub array_size: usize,
        pub storage: root::spv::StorageClass,
        pub image: root::spirv_cross::SPIRType_ImageType,
    }
    extern "C" {
        pub fn sc_internal_get_latest_exception_message(
            message: *mut *const ::std::os::raw::c_char,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_hlsl_new(
            compiler: *mut *mut root::ScInternalCompilerHlsl,
            ir: *const u32,
            size: usize,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_hlsl_set_options(
            compiler: *const root::ScInternalCompilerHlsl,
            options: *const root::ScHlslCompilerOptions,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_hlsl_set_root_constant_layout(
            compiler: *const root::ScInternalCompilerHlsl,
            constants: *const root::ScHlslRootConstant,
            count: usize,
        ) -> root::ScInternalResult;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
    pub struct ScMslConstSamplerMapping {
        pub desc_set: u32,
        pub binding: u32,
        pub sampler: root::spirv_cross::MSLConstexprSampler,
    }
    extern "C" {
        pub fn sc_internal_compiler_msl_new(
            compiler: *mut *mut root::ScInternalCompilerMsl,
            ir: *const u32,
            size: usize,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_msl_set_options(
            compiler: *const root::ScInternalCompilerMsl,
            options: *const root::ScMslCompilerOptions,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_msl_get_is_rasterization_disabled(
            compiler: *const root::ScInternalCompilerMsl,
            is_rasterization_disabled: *mut bool,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_msl_compile(
            compiler: *const root::ScInternalCompilerBase,
            shader: *mut *const ::std::os::raw::c_char,
            p_vat_overrides: *const root::spirv_cross::MSLShaderInterfaceVariable,
            vat_override_count: usize,
            p_res_overrides: *const root::spirv_cross::MSLResourceBinding,
            res_override_count: usize,
            p_const_samplers: *const root::ScMslConstSamplerMapping,
            const_sampler_count: usize,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_get_automatic_msl_resource_binding(
            compiler: *const root::ScInternalCompilerMsl,
            id: u32,
            result: *mut u32,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_glsl_new(
            compiler: *mut *mut root::ScInternalCompilerGlsl,
            ir: *const u32,
            size: usize,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_glsl_set_options(
            compiler: *const root::ScInternalCompilerGlsl,
            options: *const root::ScGlslCompilerOptions,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_glsl_build_combined_image_samplers(
            compiler: *const root::ScInternalCompilerBase,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_glsl_get_combined_image_samplers(
            compiler: *const root::ScInternalCompilerBase,
            samplers: *mut *const root::ScCombinedImageSampler,
            size: *mut usize,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_glsl_add_header_line(
            compiler: *const root::ScInternalCompilerBase,
            str_: *const ::std::os::raw::c_char,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_glsl_flatten_buffer_block(
            compiler: *const root::ScInternalCompilerBase,
            id: u32,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_get_decoration(
            compiler: *const root::ScInternalCompilerBase,
            result: *mut u32,
            id: u32,
            decoration: root::spv::Decoration,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_set_decoration(
            compiler: *const root::ScInternalCompilerBase,
            id: u32,
            decoration: root::spv::Decoration,
            argument: u32,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_unset_decoration(
            compiler: *const root::ScInternalCompilerBase,
            id: u32,
            decoration: root::spv::Decoration,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_get_name(
            compiler: *const root::ScInternalCompilerBase,
            id: u32,
            name: *mut *const ::std::os::raw::c_char,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_set_name(
            compiler: *const root::ScInternalCompilerBase,
            id: u32,
            name: *const ::std::os::raw::c_char,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_set_member_name(
            compiler: *const root::ScInternalCompilerBase,
            id: u32,
            index: u32,
            name: *const ::std::os::raw::c_char,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_get_entry_points(
            compiler: *const root::ScInternalCompilerBase,
            entry_points: *mut *mut root::ScEntryPoint,
            size: *mut usize,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_get_active_buffer_ranges(
            compiler: *const root::ScInternalCompilerBase,
            id: u32,
            active_buffer_ranges: *mut *mut root::ScBufferRange,
            size: *mut usize,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_get_cleansed_entry_point_name(
            compiler: *const root::ScInternalCompilerBase,
            original_entry_point_name: *const ::std::os::raw::c_char,
            execution_model: root::spv::ExecutionModel,
            compiled_entry_point_name: *mut *const ::std::os::raw::c_char,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_get_shader_resources(
            compiler: *const root::ScInternalCompilerBase,
            shader_resources: *mut root::ScShaderResources,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_get_specialization_constants(
            compiler: *const root::ScInternalCompilerBase,
            constants: *mut *mut root::ScSpecializationConstant,
            size: *mut usize,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_set_scalar_constant(
            compiler: *const root::ScInternalCompilerBase,
            id: u32,
            constant_high_bits: u32,
            constant_low_bits: u32,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_get_type(
            compiler: *const root::ScInternalCompilerBase,
            id: u32,
            spirv_type: *mut *const root::ScType,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_get_member_name(
            compiler: *const root::ScInternalCompilerBase,
            id: u32,
            index: u32,
            name: *mut *const ::std::os::raw::c_char,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_get_member_decoration(
            compiler: *const root::ScInternalCompilerBase,
            id: u32,
            index: u32,
            decoration: root::spv::Decoration,
            result: *mut u32,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_set_member_decoration(
            compiler: *const root::ScInternalCompilerBase,
            id: u32,
            index: u32,
            decoration: root::spv::Decoration,
            argument: u32,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_get_declared_struct_size(
            compiler: *const root::ScInternalCompilerBase,
            id: u32,
            result: *mut u32,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_get_declared_struct_member_size(
            compiler: *const root::ScInternalCompilerBase,
            id: u32,
            index: u32,
            result: *mut u32,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_rename_interface_variable(
            compiler: *const root::ScInternalCompilerBase,
            resources: *const root::ScResource,
            resources_size: usize,
            location: u32,
            name: *const ::std::os::raw::c_char,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_get_work_group_size_specialization_constants(
            compiler: *const root::ScInternalCompilerBase,
            constants: *mut *mut root::ScSpecializationConstant,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_set_entry_point(
            compiler: *const root::ScInternalCompilerBase,
            name: *const ::std::os::raw::c_char,
            execution_model: root::spv::ExecutionModel,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_compile(
            compiler: *const root::ScInternalCompilerBase,
            shader: *mut *const ::std::os::raw::c_char,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_delete(
            compiler: *mut root::ScInternalCompilerBase,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_compiler_get_active_interface_variables(
            compiler: *const root::ScInternalCompilerBase,
            ids: *mut *mut u32,
            size: *mut usize,
        ) -> root::ScInternalResult;
    }
    extern "C" {
        pub fn sc_internal_free_pointer(
            pointer: *mut ::std::os::raw::c_void,
        ) -> root::ScInternalResult;
    }
}
